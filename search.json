[{"path":"https://rwparsons.github.io/GLMMcosinor/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to GLMMcosinor","title":"Contributing to GLMMcosinor","text":"outlines propose change GLMMcosinor.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/CONTRIBUTING.html","id":"please-contribute","dir":"","previous_headings":"","what":"Please contribute!","title":"Contributing to GLMMcosinor","text":"like see change GLMMcosinor description doesn’t help, create issue contact (email DESCRIPTION).","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to GLMMcosinor","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to GLMMcosinor","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to GLMMcosinor","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"RWParsons/GLMMcosinor\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to GLMMcosinor","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":[]},{"path":"https://rwparsons.github.io/GLMMcosinor/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://rwparsons.github.io/GLMMcosinor/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://rwparsons.github.io/GLMMcosinor/articles/GLMMcosinor.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"GLMMcosinor","text":"GLMMcosinor package allows user fit generalised linear models based circadian data, allows users summarise, predict, plot based modelling. Existing packages focused primarily Gaussian data. circadian regression modelling packages allowed users specify generalised linear models, limited flexibility. GLMMcosinor takes comprehensive approach modelling utilising glmmTMB package, allows users model circadian data wide range distributions (full list - see ?family ?glmmTMB::family_glmmTMB) including: Binomial Guassian Inverse Gaussian Gamma Poisson Negative Binomial table shows features available within GLMMcosinor methods. Software Language Multicomponent Dispersion model Zero-inflated model Differential rhythmicity Parameter estimates differences Family (available link functions) Estimated parameters Reference GLMMcosinor R ✓ ✓ ✓ ✗ ✓ n > 15 family avilable {glmmTMB}: Gaussian, gamma, binomial, Poisson, … Amplitude, acrophase, MESOR Parsons, 2023 CircaCompare R ✗ ✗ ✗ ✗ ✓ n = 1 Gaussian Amplitude, acrophase, MESOR, exponential decay characteristics differences groups Parsons, 2020 Cosinor R ✗ ✗ ✗ ✓ ✓ n = 1 Gaussian Amplitude, acrophase, MESOR Sachs, 2014 Cosinor2 R ✗ ✗ ✗ ✓ ✓ n = 1 Gaussian Amplitude, acrophase, MESOR Mutak, 2018 CosinorPy Python ✓ ✗ ✗ ✓ ✓ n = 3 Gaussian, Poisson, negative-binomial Amplitude, acrophase, MESOR Moskon, 2020 DiscoRhythm R ✗ ✗ ✗ ✗ ✗ n = 1 Gaussian Amplitude, acrophase Carlucci, 2019 FMM R ✓ ✗ ✗ ✗ ✓ n = 1 Gaussian Amplitude, FMM phase angle parameters: alpha, beta, gamma Fernández, 2022 Kronos R ✓ ✗ ✗ ✓ ✓ n = 1 Gaussian Amplitude, acrophase, MESOR Bastiaanssen, 2023 LimoRhyde R ✗ ✗ ✗ ✓ ✓ n = 1 Gaussian Amplitude, acrophase, MESOR, period Singer, 2019 RhythmCount Python ✓ ✗ ✓ ✗ ✓ n = 6 Poisson, generalised-Poisson, zero-inflated Poisson, negative binomial, zero-inflated negative-binomial Amplitude, acrophase, MESOR, Zenith Velikajne, 2022","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/articles/GLMMcosinor.html","id":"cosinor-glmm","dir":"Articles","previous_headings":"","what":"cosinor.glmm()","title":"GLMMcosinor","text":"cosinor.glmm() wrangles data appropriately fit cosinor model given formula specified user. provides estimates amplitude, acrophase, MESOR (Midline Statistic Rhythm). formula argument cosinor.glmm() specified using lme4 style (details see vignette(\"lmer\", package = \"lme4\")). difference allows use amp_acro() call within formula used identify circadian components relevant variables data.frame. combination covariates can also included formula well random effects zero-inflation (ziformula) dispersion (dispformula) formulae. detailed examples specify models, see mixed-models, model-specification multiple-components vignettes.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/articles/GLMMcosinor.html","id":"an-overview-of-the-statistical-methods-used-for-parameter-estimation","dir":"Articles","previous_headings":"","what":"An overview of the statistical methods used for parameter estimation","title":"GLMMcosinor","text":"GLMMcosinor package provides estimates amplitude (\\(\\)), acrophase (\\(\\phi\\)), MESOR (\\(M\\)). MESOR (\\(M\\)) Midline Estimating Statistic Rhythm, may also referred equilbrium point Amplitude (\\(\\)) difference MESOR maximal response Acrophase (\\(\\phi\\)) phase maximal response occurs. single-component case, parameters correspond following regression model: \\[Y(t) = M + Acos(\\frac{2\\pi t}{\\tau} - \\phi) + e(t)\\] \\(e(t)\\) error term. model can equivalently expressed generalised linear model: \\[Y(t) = M + \\beta x + \\gamma z + e(t)\\] \\(x =cos(\\frac{2\\pi t}{τ})\\), \\(z =sin(\\frac{2\\pi t}{τ})\\), \\(\\beta = cos(\\phi)\\), \\(\\gamma = sin(\\phi)\\) code, amp_acro() function modify dataset supplied cosinor.glmm() call creating two transformed columns data: rrr sss take role \\(x\\) \\(z\\) respectively equation . ‘rrr’ ‘sss’ treated variables, estimates coefficients therefore \\(\\hat\\beta\\) \\(\\hat\\gamma\\). estimates presented ‘Raw Coefficients’ output cosinor.glmm() function. Depending model specification, estimate MESOR (‘(Intercept)’) may present need transformed. reason, MESOR terms raw transformed coefficient tables output. , get estimates amplitude (\\(\\)) acrophase (\\(\\phi\\)), estimates \\(\\hat\\beta\\) \\(\\hat\\gamma\\) must transformed per following equations: \\[\\hat\\phi = \\arctan(\\frac{\\hat\\gamma}{\\hat\\beta}) \\] \\[\\hat = \\sqrt{\\hat\\beta ^2 + \\hat\\gamma ^ 2}\\] transformations handled internal function get_new_coefs() inside data_utils.R script. result transformations presented ‘Transformed Coefficients’ table part cosinor.glmm() output. example, consider following model output: Notice raw transformed coefficients provided output. Also, notice dataframe modified include main_rrr1 main_sss1 columns data. data glmmTMB() function fits regression model : example, main prefix indicates data conditional model, opposed potential dispersion zero-inflation models prefixes disp zi respectively. numeric suffix 1 indicates data component 1. multiple components, columns data named accordingly. naming conventions consistent throughout GLMMcosinor package. transformations behind multi-component models follow principles, detailed discussion process addition statistics used package can found ‘Cosinor-based rhythmometry’ (Cornelissen, 2014).","code":"data(vitamind) cosinor.glmm(Y ~ X + amp_acro(time, period = 12, group = \"X\"), data = vitamind) #>  #>  Conditional Model  #>  #>  Raw formula:  #> Y ~ X + X:main_rrr1 + X:main_sss1  #>  #>  Raw Coefficients:  #>              Estimate #> (Intercept)  29.68980 #> X1            1.90186 #> X0:main_rrr1  0.93079 #> X1:main_rrr1  6.51029 #> X0:main_sss1  6.20099 #> X1:main_sss1  4.81846 #>  #>  Transformed Coefficients:  #>             Estimate #> (Intercept) 29.68980 #> [X=1]        1.90186 #> [X=0]:amp    6.27046 #> [X=1]:amp    8.09947 #> [X=0]:acr    1.42181 #> [X=1]:acr    0.63715 head(object$newdata) #>   X        Y      time  main_rrr1  main_sss1 #> 1 0 16.12091 11.439525  0.9572476 -0.2892699 #> 2 0 29.90624  5.807104 -0.9949038  0.1008285 #> 3 1 39.17572  1.045492  0.8538711  0.5204846 #> 4 1 35.15403  4.082983 -0.5371451  0.8434899 #> 5 1 43.67065 10.606247  0.7453295 -0.6666963 #> 6 0 31.20360  5.126054 -0.8971168  0.4417935"},{"path":"https://rwparsons.github.io/GLMMcosinor/articles/GLMMcosinor.html","id":"a-basic-overview-of-cosinor-glmm","dir":"Articles","previous_headings":"","what":"A basic overview of cosinor.glmm()","title":"GLMMcosinor","text":"cosinor.glmm() function used fit cosinor models variety distributions using glmmTMB() function. formula: formula specifying model structure, including response variable cosinor components. formula specification relies amp_acro function handle transformations. formula outlined . data: dataset containing variables used formula. family: family distribution response variable (e.g., poisson, gaussian, family found ?family ?glmmTMB::family_glmmTMB) amp_acro() function used within formula specify cosinor components. allows control grouping structure, rhythm period, number components. arguments amp_acro() include: group: name grouping variable dataset. time_col: name time column. n_components: number components cosinor model. period: period(s) rhythm.","code":"formula <- Y ~ amp_acro(time, period = 12) data <- vitamind family <- gaussian  cosinor.glmm(formula, data, family) #>  #>  Conditional Model  #>  #>  Raw formula:  #> Y ~ main_rrr1 + main_sss1  #>  #>  Raw Coefficients:  #>             Estimate #> (Intercept) 30.25467 #> main_rrr1    2.59418 #> main_sss1    5.75079 #>  #>  Transformed Coefficients:  #>             Estimate #> (Intercept) 30.25467 #> amp          6.30883 #> acr          1.14703"},{"path":"https://rwparsons.github.io/GLMMcosinor/articles/GLMMcosinor.html","id":"understanding-the-output","dir":"Articles","previous_headings":"A basic overview of cosinor.glmm()","what":"Understanding the output","title":"GLMMcosinor","text":"relevant output cosinor.glmm() function likely parameter estimates MESOR, amplitude, acrophase ‘Transformed Coefficients’ heading. detailed explanation difference raw coefficients transformed coefficients found vignette, section titled ‘overview statistical methods used parameter estimation’. following example looks grouped single-component model based Gaussian distribution vitamind dataset. ‘Transformed Coefficients’ heading: (Intercept) = 29.6898is MESOR estimate group 0 [X=1] = 1.90186 difference MESOR estimates group 1 2 * [X=0]:amp = 6.27046 amplitude estimate group 0 [X=1]:amp = 8.09947 amplitude estimate group 1 [X=0]:acr = 1.42181 acrophase estimate radians group 0 ** [X=1]:acr = 0.63715 acrophase estimate radians group 1 * Hence, MESOR estimate group 1 29.6898 + 1.90186 = 31.59166. due behaviour glmmTMB() function. can adjusted adding 0 + beginning formula: Note now, [X=1] = 31.59165 represents estimate MESOR group 1, rather difference. ** Note acrophase provided units radians. Since period 12, acrophase 1.42181 radians corresponds time \\(\\frac{1.42181}{2 \\pi} \\times 12 = 2.715457\\). means maximum response occurs 2.715 time units. can check visually using autoplot() function, looking [X=0] level (red line)","code":"data(vitamind) cosinor.glmm(Y ~ X + amp_acro(time, period = 12, group = \"X\"), data = vitamind) #>  #>  Conditional Model  #>  #>  Raw formula:  #> Y ~ X + X:main_rrr1 + X:main_sss1  #>  #>  Raw Coefficients:  #>              Estimate #> (Intercept)  29.68980 #> X1            1.90186 #> X0:main_rrr1  0.93079 #> X1:main_rrr1  6.51029 #> X0:main_sss1  6.20099 #> X1:main_sss1  4.81846 #>  #>  Transformed Coefficients:  #>             Estimate #> (Intercept) 29.68980 #> [X=1]        1.90186 #> [X=0]:amp    6.27046 #> [X=1]:amp    8.09947 #> [X=0]:acr    1.42181 #> [X=1]:acr    0.63715 data(vitamind) cosinor.glmm(   Y ~ 0 + X + amp_acro(time,     period = 12,     group = \"X\"   ),   data = vitamind ) #>  #>  Conditional Model  #>  #>  Raw formula:  #> Y ~ X + X:main_rrr1 + X:main_sss1 - 1  #>  #>  Raw Coefficients:  #>              Estimate #> X0           29.68980 #> X1           31.59165 #> X0:main_rrr1  0.93079 #> X1:main_rrr1  6.51029 #> X0:main_sss1  6.20101 #> X1:main_sss1  4.81847 #>  #>  Transformed Coefficients:  #>           Estimate #> [X=0]     29.68980 #> [X=1]     31.59165 #> [X=0]:amp  6.27048 #> [X=1]:amp  8.09948 #> [X=0]:acr  1.42181 #> [X=1]:acr  0.63716 object <- cosinor.glmm(   Y ~ 0 + X + amp_acro(time,     period = 12,     group = \"X\"   ),   data = vitamind ) autoplot(object, predict.ribbon = FALSE)"},{"path":"https://rwparsons.github.io/GLMMcosinor/articles/GLMMcosinor.html","id":"more-advanced-cosinor-glmm-model-specification","dir":"Articles","previous_headings":"","what":"More advanced cosinor.glmm() model specification","title":"GLMMcosinor","text":"cosinor.glmm() function allows specify different types cosinor models without grouping variables. function can also generate dispersion models zero-inflation models addition conditional model generated default. detailed explanations examples, see model-specification article. Additionally, cosinor.glmm() function provides advanced functionalities multi-component models, detailed explanations can found multiple-components article. cosinor.glmm() function also allows mixed model specification. See mixed-models article details.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/articles/GLMMcosinor.html","id":"using-summary-and-testing-for-differences-between-estimates","dir":"Articles","previous_headings":"","what":"Using summary() and testing for differences between estimates","title":"GLMMcosinor","text":"summary() method cosinor.glmm objects provides detailed summary model parameter estimates uncertainty. outputs estimates, standard errors, confidence intervals, p-values raw model parameters transformed parameters. summary statistics represent comparison groups cosinor components - role test_cosinor_components() test_cosinor_levels() functions. example use summary(): wanted test difference amplitude estimate component 1 group 1 group 2, can use test_cosinor_levels() function: estimate estimate difference inputted values, along confidence interval. real parameters amp first component 2 1 groups 0 1 respectively, difference approximately -1. Now, consider example difference clear. example, significant difference estimate amp first component reference group comparator group. Also notice comparing levels, keep component , component_index sets. Likewise, test components using test_cosinor_components(), can indicate level comparison occurs using level_index. Furthermore, may multiple groups, case can fix group using x_str argument. example testing difference components level: situation, significant difference acrophase comparator group two components.","code":"object <- cosinor.glmm(Y ~ group + amp_acro(times,                                              period = 12,                                              group = \"group\"),   data = testdata_simple, family = poisson() ) summary(object) #>  #>  Conditional Model  #> Raw model coefficients: #>                      estimate standard.error     lower.CI upper.CI    p.value #> (Intercept)       4.998454143    0.003463730  4.991665357  5.00524 < 2.22e-16 #> group1           -1.002150001    0.005937109 -1.013786521 -0.99051 < 2.22e-16 #> group0:main_rrr1  1.082281784    0.003347565  1.075720677  1.08884 < 2.22e-16 #> group1:main_rrr1  0.876651962    0.006198710  0.864502713  0.88880 < 2.22e-16 #> group0:main_sss1  1.682350718    0.003919418  1.674668800  1.69003 < 2.22e-16 #> group1:main_sss1  0.481951764    0.005936670  0.470316105  0.49359 < 2.22e-16 #>                      #> (Intercept)      *** #> group1           *** #> group0:main_rrr1 *** #> group1:main_rrr1 *** #> group0:main_sss1 *** #> group1:main_sss1 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Transformed coefficients: #>                    estimate standard.error     lower.CI upper.CI    p.value     #> (Intercept)     4.998454143    0.003463730  4.991665357  5.00524 < 2.22e-16 *** #> [group=1]      -1.002150001    0.005937109 -1.013786521 -0.99051 < 2.22e-16 *** #> [group=0]:amp1  2.000409408    0.004275553  1.992029478  2.00879 < 2.22e-16 *** #> [group=1]:amp1  1.000398004    0.007530397  0.985638697  1.01516 < 2.22e-16 *** #> [group=0]:acr1  0.999134804    0.002034131  0.995147980  1.00312 < 2.22e-16 *** #> [group=1]:acr1  0.502662068    0.007562019  0.487840783  0.51748 < 2.22e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 test_cosinor_levels(object, x_str = \"group\", param = \"amp\") #> Test Details:  #> Parameter being tested: #> Amplitude #>  #> Comparison type: #> levels #>  #> Grouping variable used for comparison between groups: group #> Reference group: 0 #> Comparator group: 1 #>  #> cosinor.glmm model only has a single component and to compare #>           between groups. #>  #>  #>  #> Global test:  #> Statistic:  #> 23339.2 #>  #> P-value:  #> 0 #>  #>  #> Individual tests: #> Statistic:  #> -152.77 #>  #> P-value:  #> 0 #>  #> Estimate and 95% confidence interval: #> -1 (-1.01 to -0.99) withr::with_seed(   50,   {     testdata_summary <- simulate_cosinor(100,       n_period = 10,       mesor = 7,       amp = c(0.1, 0.5),       acro = c(1, 1),       beta.mesor = 4.4,       beta.amp = c(0.1, 0.46),       beta.acro = c(0.5, -1.5),       family = \"poisson\",       period = c(12, 6),       n_components = 2,       beta.group = TRUE     )   } ) object <- cosinor.glmm(   Y ~ group + amp_acro(times,     period = c(12, 6),     n_components = 2,     group = \"group\"   ),   data = testdata_summary,   family = poisson() ) test_cosinor_levels(object, x_str = \"group\", param = \"amp\", component_index = 1) #> Test Details:  #> Parameter being tested: #> Amplitude #>  #> Comparison type: #> levels #>  #> Grouping variable used for comparison between groups: group #> Reference group: 0 #> Comparator group: 1 #>  #> cosinor.glmm model has2 components. Component 1 is being used for comparison between groups. #>  #>  #>  #> Global test:  #> Statistic:  #> 0.05 #>  #> P-value:  #> 0.8233 #>  #>  #> Individual tests: #> Statistic:  #> 0.22 #>  #> P-value:  #> 0.8233 #>  #> Estimate and 95% confidence interval: #> 0 (-0.03 to 0.04) test_cosinor_components(object, x_str = \"group\", param = \"acr\", level_index = 1) #> Test Details:  #> Parameter being tested: #> Acrophase #>  #> Comparison type: #> components #>  #> Component indices used for comparison between groups: group #> Reference component: 1 #> Comparator component: 2 #>  #>  #> Global test:  #> Statistic:  #> 138.22 #>  #> P-value:  #> 0 #>  #>  #> Individual tests: #> Statistic:  #> -11.76 #>  #> P-value:  #> 0 #>  #> Estimate and 95% confidence interval: #> -2.19 (-2.56 to -1.83)"},{"path":"https://rwparsons.github.io/GLMMcosinor/articles/GLMMcosinor.html","id":"using-predict","dir":"Articles","previous_headings":"","what":"Using predict()","title":"GLMMcosinor","text":"predict() method cosinor.glmm objects allows users get predicted values model either existing new data. (predicted values used generating plots using plot().)","code":"fit <- cosinor.glmm(   Y ~ group + amp_acro(times,     period = 12,     group = NA   ),   data = testdata_simple,   family = poisson() ) head(predict(fit)) #> [1] 4.998724 4.912528 5.187728 3.896753 6.412309 6.785907"},{"path":"https://rwparsons.github.io/GLMMcosinor/articles/GLMMcosinor.html","id":"plotting-cosinor-glmm-objects","dir":"Articles","previous_headings":"","what":"Plotting cosinor.glmm objects","title":"GLMMcosinor","text":"GLMMcosinor package includes two ways visualise cosinor.glmm() objects. Firstly, autoplot() method creates time-response plot fitted model groups:  function also allows users superimpose data (used fit model) fitted model, using superimpose.data = TRUE, demonstrated . default, generated plot x-limits corresponding minimum maximum values time-vector original dataframe, although x-limits can manually defined user using xlims argument. details using autoplot function found model-visualisations vignette.","code":"object <- cosinor.glmm(   Y ~ group + amp_acro(times,     period = 12,     group = \"group\"   ),   data = testdata_simple,   family = poisson() )  autoplot(object, superimpose.data = TRUE)"},{"path":"https://rwparsons.github.io/GLMMcosinor/articles/data-simulations.html","id":"using-simulate_cosinor-r","dir":"Articles","previous_headings":"","what":"Using: ‘simulate_cosinor.R’","title":"data-simulations","text":"simulate_cosinor allows users simulate circadian data Gaussian, Gamma, Binomial, Poisson distributions. also supports generation multi-component data, well simulation grouped data two levels.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/articles/data-simulations.html","id":"understanding-the-inputs-for-a-simple-model","dir":"Articles","previous_headings":"Using: ‘simulate_cosinor.R’","what":"Understanding the inputs for a simple model","title":"data-simulations","text":"n specifies number datapoints. mesor, amp, acro represent parameters used simulate dataset. Note acro expressed units radians. period determines period dataset n_components corresponds number components simulated dataset. Details specify multi-component model included later vignette family argument determines distribution data simulated . Currently, simulate_cosinor supports simulations Gaussian, Gamma, Binomial, Poisson distributions: family = 'gaussian' family = 'gamma' family = 'binomial' family = 'poisson' Note … parameter controls extra arguments standard deviation, shape parameter Gamma distribution: sd controls standard deviation sampling normal distribution. sd set 1 default alpha controls shape parameter Gamma distribution. alpha set 1 default n_period number periods simulated. default, maximum period supplied defines upper limit time vector used simulation. Thus, increasing n_period increases number cycles simulated. Consider following example single-component Poisson data-set grouping variable: Now, let’s fit cosinor.glmm() model simulated dataset see matches original parameters:","code":"testdata <- simulate_cosinor(   n = 200,   mesor = 1,   amp = 2,   acro = 1.2,   period = 12,   n_period = 3,   family = c(\"poisson\") )  testdata object <- cosinor.glmm(   Y ~ amp_acro(times,     n_components = 1,     period = 12   ),   data = testdata,   family = poisson() ) summary(object) autoplot(object, superimpose.data = TRUE)"},{"path":"https://rwparsons.github.io/GLMMcosinor/articles/data-simulations.html","id":"simulating-grouped-cosinor-data","dir":"Articles","previous_headings":"Using: ‘simulate_cosinor.R’","what":"Simulating grouped cosinor data","title":"data-simulations","text":"simulate_cosinor() function can simulate grouped data two levels parameters beta.group = TRUE. reference group specified parameters mesor, amp, acro. treatment group specified manner, beta prefix. example: beta.mesor beta.amp beta.acro Similarly, standard deviation (sd) Gaussian distribution alpha parameter Gamma distribution specified : beta.sd (1 default) beta.alpha (1 default)","code":"simulate_cosinor(   n = 100,   mesor = 1,   amp = 2,   acro = 1.2,   period = 12,   beta.group = TRUE,   beta.mesor = 0.4,   beta.amp = 0.5,   beta.acro = 0.2,   n_period = 3,   n_components = 1,   family = c(\"poisson\") ) #>  #>  Conditional Model  #> Raw model coefficients: #>                     estimate standard.error    lower.CI upper.CI    p.value     #> (Intercept)       1.12471487     0.09422193  0.94004328  1.30939 < 2.22e-16 *** #> group1           -0.75385065     0.13324993 -1.01501572 -0.49269 1.5367e-08 *** #> group0:main_rrr1  0.71338168     0.12884832  0.46084362  0.96592 3.0840e-08 *** #> group1:main_rrr1  0.55255466     0.12884832  0.30001660  0.80509 1.7996e-05 *** #> group0:main_sss1  1.84542049     0.13680041  1.57729662  2.11354 < 2.22e-16 *** #> group1:main_sss1 -0.20113095     0.13680041 -0.46925482  0.06699    0.14149     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Transformed coefficients: #>                   estimate standard.error    lower.CI upper.CI    p.value     #> (Intercept)     1.12471487     0.09422193  0.94004328  1.30939 < 2.22e-16 *** #> [group=1]      -0.75385065     0.13324993 -1.01501572 -0.49269 1.5367e-08 *** #> [group=0]:amp1  1.97850706     0.13528422  1.71335487  2.24366 < 2.22e-16 *** #> [group=1]:amp1  0.58802237     0.18428687  0.22682674  0.94922  0.0014188 **  #> [group=0]:acr1  1.20192206     0.06539166  1.07375677  1.33009 < 2.22e-16 *** #> [group=1]:acr1 -0.34909382     0.32799394 -0.99195013  0.29376  0.2871792     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://rwparsons.github.io/GLMMcosinor/articles/data-simulations.html","id":"simulating-multi-component-cosinor-data","dir":"Articles","previous_headings":"Using: ‘simulate_cosinor.R’","what":"Simulating multi-component cosinor data","title":"data-simulations","text":"simulate multi-component data number components corresponding n_components , specify vector values parameter inputs, amp, acro, period. Since one mesor provided multi-component cosinor curve, mesor argument simualte_cosinor accept single-element inputs. example: example: mesor = 1 suggests intercept overall cosinor curve (accounting components) 1 amp=c(0.2,1) indicates amplitude first component 0.2, second 1 acro = c(1.2, 2) indicates acrophase first component 1.2 radians, second 2 radians period = c(12, 6) indicates period first component 12 units, second 6 units. n_components = 2, specifying two-component dataset simulate dataset two components, specify elements vector inputs parameters. Ensure number inputs parameter corresponds number components specified n_components. example, n_components = 3, amp, acro, period must 3 elements corresponding three components. following examples multi-component cosinor dataset mutliple groups. first one Poisson distribution, second Gamma distribution","code":"testdata <- simulate_cosinor(   n = 200,   mesor = 1,   amp = c(0.2, 1),   acro = c(1.2, 2),   period = c(12, 6),   n_components = 2,   n_period = 2,   family = c(\"poisson\") )  testdata object <- cosinor.glmm(   Y ~ amp_acro(times,     n_components = 2,     period = c(12, 6)   ),   data = testdata,   family = poisson() ) summary(object) autoplot(object, superimpose.data = TRUE) testdata <- simulate_cosinor(100,   mesor = 7,   amp = c(0.1, 0.4, 0.5),   acro = c(1, 1.5, 0.1),   beta.mesor = 4.4,   beta.amp = c(2, 1, 0.4),   beta.acro = c(1, -1.5, -1),   family = \"poisson\",   period = c(12, 6, 8),   n_period = 2,   n_components = 3 )  object <- cosinor.glmm(Y ~ group + amp_acro(times,   n_components = 3,   period = c(12, 6, 8),   group = \"group\" ), data = testdata, family = poisson()) summary(object) #>  #>  Conditional Model  #> Raw model coefficients: #>                      estimate standard.error     lower.CI upper.CI    p.value #> (Intercept)       7.001949245    0.003224574  6.995629195  7.00827 < 2.22e-16 #> group1           -2.611361564    0.017663939 -2.645982249 -2.57674 < 2.22e-16 #> group0:main_rrr1  0.052864667    0.004147664  0.044735395  0.06099 < 2.22e-16 #> group1:main_rrr1  1.102376756    0.020771738  1.061664898  1.14309 < 2.22e-16 #> group0:main_sss1  0.085019375    0.004360295  0.076473354  0.09357 < 2.22e-16 #> group1:main_sss1  1.705947603    0.023141802  1.660590504  1.75130 < 2.22e-16 #> group0:main_rrr2  0.030735723    0.004157416  0.022587337  0.03888 1.4357e-13 #> group1:main_rrr2  0.058571080    0.015273186  0.028636186  0.08851 0.00012562 #> group0:main_sss2  0.401777487    0.004411490  0.393131125  0.41042 < 2.22e-16 #> group1:main_sss2 -1.012181709    0.016633860 -1.044783474 -0.97958 < 2.22e-16 #> group0:main_rrr3  0.488990864    0.004264286  0.480633017  0.49735 < 2.22e-16 #> group1:main_rrr3  0.217323725    0.009758435  0.198197545  0.23645 < 2.22e-16 #> group0:main_sss3  0.051055977    0.004129434  0.042962434  0.05915 < 2.22e-16 #> group1:main_sss3 -0.342395904    0.012495401 -0.366886441 -0.31791 < 2.22e-16 #>                      #> (Intercept)      *** #> group1           *** #> group0:main_rrr1 *** #> group1:main_rrr1 *** #> group0:main_sss1 *** #> group1:main_sss1 *** #> group0:main_rrr2 *** #> group1:main_rrr2 *** #> group0:main_sss2 *** #> group1:main_sss2 *** #> group0:main_rrr3 *** #> group1:main_rrr3 *** #> group0:main_sss3 *** #> group1:main_sss3 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Transformed coefficients: #>                    estimate standard.error     lower.CI upper.CI    p.value     #> (Intercept)     7.001949245    0.003224574  6.995629195  7.00827 < 2.22e-16 *** #> [group=1]      -2.611361564    0.017663939 -2.645982249 -2.57674 < 2.22e-16 *** #> [group=0]:amp1  0.100114769    0.003814053  0.092639363  0.10759 < 2.22e-16 *** #> [group=1]:amp1  2.031130654    0.027294216  1.977634975  2.08463 < 2.22e-16 *** #> [group=0]:amp2  0.402951404    0.006143988  0.390909409  0.41499 < 2.22e-16 *** #> [group=1]:amp2  1.013874935    0.017304324  0.979959082  1.04779 < 2.22e-16 *** #> [group=0]:amp3  0.491649040    0.005860010  0.480163630  0.50313 < 2.22e-16 *** #> [group=1]:amp3  0.405542300    0.012172269  0.381685090  0.42940 < 2.22e-16 *** #> [group=0]:acr1  1.014504675    0.037034138  0.941919099  1.08709 < 2.22e-16 *** #> [group=1]:acr1  0.997099823    0.013039662  0.971542554  1.02266 < 2.22e-16 *** #> [group=0]:acr2  1.494445667    0.014326519  1.466366207  1.52253 < 2.22e-16 *** #> [group=1]:acr2 -1.512994615    0.015735274 -1.543835186 -1.48215 < 2.22e-16 *** #> [group=0]:acr3  0.104033947    0.011533570  0.081428566  0.12664 < 2.22e-16 *** #> [group=1]:acr3 -1.005241616    0.027176605 -1.058506783 -0.95198 < 2.22e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 autoplot(object,   superimpose.data = TRUE,   x_str = \"group\",   predict.ribbon = FALSE ) testdata <- simulate_cosinor(500,   mesor = 1,   amp = c(0.5, 0.5, 0.5),   acro = c(pi, pi / 2, pi),   alpha = 2,   beta.mesor = 2,   beta.amp = c(0.2, 0.2, 0.2),   beta.acro = c(pi / 2, pi, pi / 2),   beta.alpha = 3,   family = \"gamma\",   period = c(12, 6, 8),   n_period = 2,   n_components = 3 )  object <- cosinor.glmm(Y ~ group + amp_acro(times,   n_components = 3,   period = c(12, 6, 8),   group = \"group\" ), data = testdata, family = Gamma(link = \"log\")) summary(object) #>  #>  Conditional Model  #> Raw model coefficients: #>                      estimate standard.error     lower.CI upper.CI    p.value #> (Intercept)       0.965440104    0.029477024  0.907666199  1.02321 < 2.22e-16 #> group1            1.015618864    0.041715469  0.933858048  1.09738 < 2.22e-16 #> group0:main_rrr1 -0.449826798    0.040444874 -0.529097294 -0.37056 < 2.22e-16 #> group1:main_rrr1  0.005324205    0.040468114 -0.073991842  0.08464 0.89532803 #> group0:main_sss1 -0.006755147    0.042573551 -0.090197773  0.07669 0.87392884 #> group1:main_sss1  0.205196659    0.042845400  0.121221218  0.28917 1.6742e-06 #> group0:main_rrr2 -0.008711448    0.041053779 -0.089175375  0.07175 0.83195413 #> group1:main_rrr2 -0.137693766    0.040805582 -0.217671237 -0.05772 0.00073981 #> group0:main_sss2  0.443183115    0.041804619  0.361247566  0.52512 < 2.22e-16 #> group1:main_sss2  0.020328248    0.042316818 -0.062611192  0.10327 0.63095563 #> group0:main_rrr3 -0.555194286    0.040935120 -0.635425647 -0.47496 < 2.22e-16 #> group1:main_rrr3  0.038150889    0.042230264 -0.044618907  0.12092 0.36631278 #> group0:main_sss3 -0.032079351    0.041596845 -0.113607669  0.04945 0.44059034 #> group1:main_sss3  0.201224608    0.040509507  0.121827433  0.28062 6.7877e-07 #>                      #> (Intercept)      *** #> group1           *** #> group0:main_rrr1 *** #> group1:main_rrr1     #> group0:main_sss1     #> group1:main_sss1 *** #> group0:main_rrr2     #> group1:main_rrr2 *** #> group0:main_sss2 *** #> group1:main_sss2     #> group0:main_rrr3 *** #> group1:main_rrr3     #> group0:main_sss3     #> group1:main_sss3 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Transformed coefficients: #>                   estimate standard.error    lower.CI upper.CI    p.value     #> (Intercept)     0.96544010     0.02947702  0.90766620  1.02321 < 2.22e-16 *** #> [group=1]       1.01561886     0.04171547  0.93385805  1.09738 < 2.22e-16 *** #> [group=0]:amp1  0.44987752     0.04048604  0.37052633  0.52923 < 2.22e-16 *** #> [group=1]:amp1  0.20526572     0.06050347  0.08668110  0.32385 0.00069226 *** #> [group=0]:amp2  0.44326873     0.05789259  0.32980133  0.55674 1.9071e-14 *** #> [group=1]:amp2  0.13918625     0.05733444  0.02681280  0.25156 0.01519826 *   #> [group=0]:amp3  0.55612029     0.05711445  0.44417803  0.66806 < 2.22e-16 *** #> [group=1]:amp3  0.20480926     0.05900450  0.08916257  0.32046 0.00051837 *** #> [group=0]:acr1 -3.12657656     0.09471851 -3.31222144 -2.94093 < 2.22e-16 *** #> [group=1]:acr1  1.54485531     0.27928232  0.99747203  2.09224 3.1747e-08 *** #> [group=0]:acr2  1.59045034     0.12551061  1.34445406  1.83645 < 2.22e-16 *** #> [group=1]:acr2  2.99501768     0.42967844  2.15286341  3.83717 3.1611e-12 *** #> [group=0]:acr3 -3.08387642     0.10859035 -3.29670960 -2.87104 < 2.22e-16 *** #> [group=1]:acr3  1.38342669     0.28676945  0.82136889  1.94548 1.4058e-06 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 autoplot(object,   superimpose.data = TRUE,   x_str = \"group\",   predict.ribbon = FALSE )"},{"path":"https://rwparsons.github.io/GLMMcosinor/articles/mixed-models.html","id":"data-with-subject-level-differences","dir":"Articles","previous_headings":"","what":"Data with subject-level differences","title":"mixed-models","text":"illustrate example using model random effects cosinor components, first simulate data id-level differences amplitude acrophase. quick graph shows individual differences terms MESOR, amplitude phase.","code":"f_sample_id <- function(id_num,                         n = 30,                         mesor,                         amp,                         acro,                         family = \"gaussian\",                         sd = 0.2,                         period,                         n_components,                         beta.group = TRUE) {   data <- simulate_cosinor(     n = n,     mesor = mesor,     amp = amp,     acro = acro,     family = family,     sd = sd,     period = period,     n_components = n_components   )   data$subject <- id_num   data }  dat_mixed <- do.call(   \"rbind\",   lapply(1:30, function(x) {     f_sample_id(       id_num = x,       mesor = rnorm(1, mean = 0, sd = 1),       amp = rnorm(1, mean = 3, sd = 0.5),       acro = rnorm(1, mean = 1.5, sd = 0.2),       period = 24,       n_components = 1     )   }) ) |>   mutate(subject = as.factor(subject)) dat_mixed |>   ggplot(aes(times, Y, col = subject)) +   geom_point() +   geom_line() +   theme_bw()"},{"path":"https://rwparsons.github.io/GLMMcosinor/articles/mixed-models.html","id":"a-single-component-model-with-random-effects","dir":"Articles","previous_headings":"","what":"A single component model with random effects","title":"mixed-models","text":"model, include random effect MESOR, amplitude acrophase clustered within individuals. model formula, can use special amp_acro[n] represents nth cosinor component. case, one component use amp_acro1. Following lme4-style mixed model formula, add random effect component intercept term (MESOR) clustered within subjects using (1 + amp_acro1 | subject). code fits model works replacing amp_acro1 relevant cosinor components data rearranged formula created. formula created can accessed using .$formula, shows amp_acro1 replaced main_rrr1 main_sss1 (cosine sine components time also appear fixed effects). summary model shows input means MESOR, amplitude acrophase similar specified simulation (0, 3, 1.5, respectively). can see predicted values model closely resemble patterns see input data.  looks like good model fit data. can highlight importance using mixed model situation rather fixed effects model creating (bad) model comparing two using Akaike information criterion using AIC(). Aside able useful see differences subjects model, end much worse model fit likely biased /imprecise estimates fixed effects interested !","code":"mixed_mod <- cosinor.glmm(   Y ~ amp_acro(times,     n_components = 1,     period = 24   ) + (1 + amp_acro1 | subject),   data = dat_mixed ) #> Warning in checkMatrixPackageVersion(): Package version inconsistency detected. #> TMB was built with Matrix version 1.6.1 #> Current Matrix version is 1.5.4.1 #> Please re-install 'TMB' from source using install.packages('TMB', type = 'source') or ask CRAN for a binary version of 'TMB' matching CRAN's 'Matrix' package mixed_mod$formula #> Y ~ main_rrr1 + main_sss1 + (1 + main_rrr1 + main_sss1 | subject) #> <environment: 0x55f7b2fefe20> summary(mixed_mod) #>  #>  Conditional Model  #> Raw model coefficients: #>                estimate standard.error    lower.CI upper.CI  p.value     #> (Intercept)  0.06830097     0.17646992 -0.27757371  0.41418 0.698726     #> main_rrr1    0.27255126     0.11246107  0.05213161  0.49297 0.015371 *   #> main_sss1    3.00776762     0.07129123  2.86803938  3.14750  < 2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Transformed coefficients: #>                estimate standard.error    lower.CI upper.CI p.value     #> (Intercept)  0.06830097     0.17646992 -0.27757371  0.41418 0.69873     #> amp1         3.02009110     0.07237171  2.87824514  3.16194 < 2e-16 *** #> acr1         1.48042734     0.03728472  1.40735062  1.55350 < 2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 data.frame(pred = predict(mixed_mod)) |>   cbind(dat_mixed) |>   ggplot() +   geom_point(aes(x = times, y = Y, col = subject)) +   geom_line(aes(x = times, y = pred, col = subject)) fixed_effects_mod <- cosinor.glmm(   Y ~ amp_acro(times, n_components = 1, period = 24),   data = dat_mixed )  AIC(fixed_effects_mod$fit) #> [1] 2715.855 AIC(mixed_mod$fit) #> [1] 218.7421"},{"path":"https://rwparsons.github.io/GLMMcosinor/articles/model-specification.html","id":"cosinor-glmm","dir":"Articles","previous_headings":"","what":"cosinor.glmm()","title":"model-specification","text":"cosinor.glmm() wrangles data appropriately fit cosinor model given formula specified user. provides estimates amplitude, acrophase, MESOR (Midline Statistic Rhythm). formula argument cosinor.glmm() specified using lme4 style (details see vignette(\"lmer\", package = \"lme4\")). difference allows use amp_acro() call within formula used identify circadian components relevant variables data.frame. combination covariates can also included formula well random effects zero-inflation (ziformula) dispersion (dispformula) formulae. detailed examples specify models, see mixed-models, model-specification multiple-components vignettes.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/articles/model-specification.html","id":"using-cosinor-glmm","dir":"Articles","previous_headings":"","what":"Using cosinor.glmm()","title":"model-specification","text":"following examples use data simulated simulate_cosinor function.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/articles/model-specification.html","id":"specifying-a-single-component-model-with-no-grouping-variable","dir":"Articles","previous_headings":"Using cosinor.glmm()","what":"Specifying a single-component model with no grouping variable","title":"model-specification","text":", fit simple cosinor model “testdata_simple” - simulated data Poisson distribution loaded vignette. example, grouping variable. output shows estimates raw coefficients addition transformed estimates amplitude (amp) acrophase (acr) MESOR ((Intercept)). previous section vignette: overview statistical methods used parameter estimation outlines difference raw coefficients transformed coefficients. interpret output follows: MESOR estimate = 4.99845 Amplitude estimate = 1.08228 Acrophase estimate = 0.99913 Note estimate radians align conventions. interpret , can express 0.99913 radians fraction total \\(2\\pi\\) multiply period get time response maximal. Hence, \\(\\frac{0.99913}{2\\pi} \\times 12 = 1.908\\) units time_col column original dataframe. saying peak response occur 1.908 time-units every 12 time-units . can confirm plotting:","code":"object <- cosinor.glmm(   Y ~ amp_acro(times,     period = 12   ),   data = filter(testdata_simple, group == 0),   family = poisson() ) object #>  #>  Conditional Model  #>  #>  Raw formula:  #> Y ~ main_rrr1 + main_sss1  #>  #>  Raw Coefficients:  #>             Estimate #> (Intercept)  4.99845 #> main_rrr1    1.08228 #> main_sss1    1.68235 #>  #>  Transformed Coefficients:  #>             Estimate #> (Intercept)  4.99845 #> amp          2.00041 #> acr          0.99913 autoplot(object, superimpose.data = TRUE)"},{"path":"https://rwparsons.github.io/GLMMcosinor/articles/model-specification.html","id":"specifying-a-single-component-model-with-a-grouping-variable-and-a-shared-mesor","dir":"Articles","previous_headings":"Using cosinor.glmm()","what":"Specifying a single-component model with a grouping variable and a shared MESOR","title":"model-specification","text":"Now, can add grouping variable adding name group amp_acro() function: example , amplitude phase estimated separately two groups intercept term shared. represents shared estimate MESOR groups useful two groups known common baseline (equilibrium point). Hence, interpret transformed coefficients follows: MESOR estimate 4.47411 group = 0 group = 1. estimates amplitude acrophase reference MESOR estimate 4.47411  However, groups dataset simulated two different MESORS, appropriate specify intercept term formula, estimate MESOR group = 0 group = 1:","code":"object <- cosinor.glmm(   Y ~ amp_acro(times,     period = 12,     group = \"group\"   ),   data = testdata_simple_gaussian,   family = gaussian ) object #>  #>  Conditional Model  #>  #>  Raw formula:  #> Y ~ group:main_rrr1 + group:main_sss1  #>  #>  Raw Coefficients:  #>                  Estimate #> (Intercept)       4.47411 #> group0:main_rrr1  1.03269 #> group1:main_rrr1  0.90210 #> group0:main_sss1  1.67745 #> group1:main_sss1  0.48497 #>  #>  Transformed Coefficients:  #>               Estimate #> (Intercept)    4.47411 #> [group=0]:amp  1.96985 #> [group=1]:amp  1.02419 #> [group=0]:acr  1.01896 #> [group=1]:acr  0.49327 autoplot(object)"},{"path":"https://rwparsons.github.io/GLMMcosinor/articles/model-specification.html","id":"specifying-a-single-component-model-with-a-grouping-variable-and-an-intercept-mesor","dir":"Articles","previous_headings":"Using cosinor.glmm()","what":"Specifying a single-component model with a grouping variable and an intercept (MESOR)","title":"model-specification","text":"Similarly normal regression model lme4 glmmTMB, can add term group model can estimate difference MESOR two groups. dataset used previous example, note following differences: MESOR estimate reference group (group = 0) given (Intercept) = 4.96476 estimate difference MESOR reference group (group = 0) treatment group (group = 1) given [group=1] = -0.98129. , estimate MESOR group = 1 3.98347. estimates amplitude acrophase slightly different previous example longer shared MESOR. Plotting model comparing previous model used dataset, one can appreciate importance specifying formula correctly order gain accurate model.  may also interested estimating MESOR two groups separately, rather difference groups. achieve , can remove intercept term using 0 +.","code":"object <- cosinor.glmm(   Y ~ group + amp_acro(times,     period = 12,     group = \"group\"   ),   data = testdata_simple_gaussian,   family = gaussian() ) object #>  #>  Conditional Model  #>  #>  Raw formula:  #> Y ~ group + group:main_rrr1 + group:main_sss1  #>  #>  Raw Coefficients:  #>                  Estimate #> (Intercept)       4.96476 #> group1           -0.98129 #> group0:main_rrr1  1.04667 #> group1:main_rrr1  0.88812 #> group0:main_sss1  1.68266 #> group1:main_sss1  0.47976 #>  #>  Transformed Coefficients:  #>               Estimate #> (Intercept)    4.96476 #> [group=1]     -0.98129 #> [group=0]:amp  1.98163 #> [group=1]:amp  1.00942 #> [group=0]:acr  1.01433 #> [group=1]:acr  0.49529 autoplot(object) cosinor.glmm(   Y ~ 0 + group + amp_acro(times,     period = 12,     group = \"group\"   ),   data = testdata_simple,   family = poisson() ) #>  #>  Conditional Model  #>  #>  Raw formula:  #> Y ~ group + group:main_rrr1 + group:main_sss1 - 1  #>  #>  Raw Coefficients:  #>                  Estimate #> group0            4.99845 #> group1            3.99631 #> group0:main_rrr1  1.08228 #> group1:main_rrr1  0.87665 #> group0:main_sss1  1.68235 #> group1:main_sss1  0.48195 #>  #>  Transformed Coefficients:  #>               Estimate #> [group=0]      4.99845 #> [group=1]      3.99631 #> [group=0]:amp  2.00041 #> [group=1]:amp  1.00040 #> [group=0]:acr  0.99913 #> [group=1]:acr  0.50266"},{"path":"https://rwparsons.github.io/GLMMcosinor/articles/model-specification.html","id":"specifying-more-complicated-models-using-the-amp_acro-function","dir":"Articles","previous_headings":"Using cosinor.glmm()","what":"Specifying more complicated models using the amp_acro() function","title":"model-specification","text":"amp_acro() function controls cosinor components model (specifically, affects just fixed-effects part). provides user ability specify grouping structures, period rhythm, number components. several arguments user must specify: group name grouping variable dataset. can string object time_col name time column dataset. can string object n_components number components. user wishes fit multicomponent cosinor model, can specify number components using n_components variable. value n_components need match length group period arguments combined component. example: output, suffix estimates amplitude acrophase represents component: [group=0]:amp1 = 0.10113 represents estimate amplitude group 0 first component [group=1]:amp1 = 2.00645 represents estimate amplitude group 1 first component [group=0]:amp2 = 0.39776 represnts estimate amplitude group 0 second component [group=1]:amp2 = 1.00162 represnts estimate amplitude group 1 second component Similarly acrophase estimates multicomponent model one component grouped components aren’t, vector input group must still length n_components non-grouped components represented group = NA. example, wanted first component grouped component, specify group argument group = c(\"group\", NA)). detailed explanation specify multi-component models, see multiple-components","code":"cosinor.glmm(   Y ~ group + amp_acro(     time_col = times,     n_components = 2,     period = c(12, 6),     group = c(\"group\", \"group\")   ),   data = testdata_two_components,   family = poisson() ) #>  #>  Conditional Model  #>  #>  Raw formula:  #> Y ~ group + group:main_rrr1 + group:main_sss1 + group:main_rrr2 +      group:main_sss2  #>  #>  Raw Coefficients:  #>                  Estimate #> (Intercept)       7.00043 #> group1           -2.60739 #> group0:main_rrr1  0.05665 #> group1:main_rrr1  1.08270 #> group0:main_sss1  0.08378 #> group1:main_sss1  1.68926 #> group0:main_rrr2  0.02884 #> group1:main_rrr2  0.07367 #> group0:main_sss2  0.39671 #> group1:main_sss2 -0.99891 #>  #>  Transformed Coefficients:  #>                Estimate #> (Intercept)     7.00043 #> [group=1]      -2.60739 #> [group=0]:amp1  0.10113 #> [group=1]:amp1  2.00645 #> [group=0]:amp2  0.39776 #> [group=1]:amp2  1.00162 #> [group=0]:acr1  0.97624 #> [group=1]:acr1  1.00082 #> [group=0]:acr2  1.49824 #> [group=1]:acr2 -1.49717"},{"path":"https://rwparsons.github.io/GLMMcosinor/articles/model-specification.html","id":"dispersion-and-zero-inflation-model-specification","dir":"Articles","previous_headings":"Using cosinor.glmm()","what":"Dispersion and zero-inflation model specification","title":"model-specification","text":"cosinor.glmm() function allows users specify formulas dispersion zero-inflation models. formulas independent main formula specification: output provides estimates conditional model (default model), dispersion model, also zero-inflation model. default, dispformula = ~1, ziformula = ~0 means additional models generated output. Note example , value periods number components dispersion zero-inflation formulas chosen arbitrarily purely demonstration.","code":"testdata_disp_zi <- simulate_cosinor(1000,   n_period = 6,   mesor = 7,   amp = c(0.1, 0.4, 0.5),   acro = c(1, 1.5, 0.1),   beta.mesor = 4.4,   beta.amp = c(2, 1, 0.4),   beta.acro = c(1, -1.5, -1),   family = \"gaussian\",   period = c(12, 6, 8),   n_components = 3 ) object_disp_zi <- cosinor.glmm(   Y ~ group + amp_acro(times,     n_components = 3,     period = c(12, 6, 8),     group = \"group\"   ),   data = testdata_disp_zi, family = gaussian(),   dispformula = ~ group + amp_acro(times,     n_components = 2,     group = \"group\",     period = c(12, 6)   ),   ziformula = ~ group + amp_acro(times,     n_components = 3,     group = \"group\",     period = c(7, 8, 2)   ) )  object_disp_zi #>  #>  Conditional Model  #>  #>  Raw formula:  #> Y ~ group + group:main_rrr1 + group:main_sss1 + group:main_rrr2 +      group:main_sss2 + group:main_rrr3 + group:main_sss3  #>  #>  Raw Coefficients:  #>                  Estimate #> (Intercept)       7.01673 #> group1           -2.60337 #> group0:main_rrr1  0.06694 #> group1:main_rrr1  1.11762 #> group0:main_sss1  0.10863 #> group1:main_sss1  1.72245 #> group0:main_rrr2  0.07312 #> group1:main_rrr2  0.01700 #> group0:main_sss2  0.41510 #> group1:main_sss2 -1.03006 #> group0:main_rrr3  0.49647 #> group1:main_rrr3  0.15747 #> group0:main_sss3  0.00600 #> group1:main_sss3 -0.36021 #>  #>  Transformed Coefficients:  #>                Estimate #> (Intercept)     7.01673 #> [group=1]      -2.60337 #> [group=0]:amp1  0.12760 #> [group=1]:amp1  2.05327 #> [group=0]:amp2  0.42149 #> [group=1]:amp2  1.03020 #> [group=0]:amp3  0.49650 #> [group=1]:amp3  0.39312 #> [group=0]:acr1  1.01853 #> [group=1]:acr1  0.99523 #> [group=0]:acr2  1.39644 #> [group=1]:acr2 -1.55429 #> [group=0]:acr3  0.01209 #> [group=1]:acr3 -1.15866 #>  #> *********************** #>  #>  Dispersion Model  #>  #>  Raw  Formula:  #> ~group + group:disp_rrr1 + group:disp_sss1 + group:disp_rrr2 +      group:disp_sss2  #>  #>  Raw  Coefficients:  #>                  Estimate #> (Intercept)      -0.02886 #> group1           -0.00662 #> group0:disp_rrr1 -0.13572 #> group1:disp_rrr1 -0.09512 #> group0:disp_sss1  0.01662 #> group1:disp_sss1  0.03135 #> group0:disp_rrr2 -0.02009 #> group1:disp_rrr2  0.06428 #> group0:disp_sss2 -0.00012 #> group1:disp_sss2  0.01046 #>  #>  Transformed  Coefficients:  #>                Estimate #> (Intercept)    -0.02886 #> [group=1]      -0.00662 #> [group=0]:amp1  0.13673 #> [group=1]:amp1  0.10015 #> [group=0]:amp2  0.02009 #> [group=1]:amp2  0.06512 #> [group=0]:acr1  3.01974 #> [group=1]:acr1  2.82320 #> [group=0]:acr2 -3.13548 #> [group=1]:acr2  0.16139 #>  #> *********************** #>  #>  Zero-Inflation Model  #>  #>  Raw  Formula:  #> ~group + group:zi_rrr1 + group:zi_sss1 + group:zi_rrr2 + group:zi_sss2 +      group:zi_rrr3 + group:zi_sss3  #>  #>  Raw  Coefficients:  #>                 Estimate #> (Intercept)    -23.50377 #> group1           1.55318 #> group0:zi_rrr1   0.01103 #> group1:zi_rrr1   0.01441 #> group0:zi_sss1   0.00547 #> group1:zi_sss1   0.09918 #> group0:zi_rrr2  -0.01232 #> group1:zi_rrr2  -0.03912 #> group0:zi_sss2   0.00279 #> group1:zi_sss2   0.08156 #> group0:zi_rrr3  -0.00657 #> group1:zi_rrr3  -0.07075 #> group0:zi_sss3   0.00417 #> group1:zi_sss3   0.04503 #>  #>  Transformed  Coefficients:  #>                 Estimate #> (Intercept)    -23.50377 #> [group=1]        1.55318 #> [group=0]:amp1   0.01231 #> [group=1]:amp1   0.10022 #> [group=0]:amp2   0.01263 #> [group=1]:amp2   0.09046 #> [group=0]:amp3   0.00779 #> [group=1]:amp3   0.08386 #> [group=0]:acr1   0.46046 #> [group=1]:acr1   1.42653 #> [group=0]:acr2   2.91848 #> [group=1]:acr2   2.01806 #> [group=0]:acr3   2.57600 #> [group=1]:acr3   2.57476"},{"path":"https://rwparsons.github.io/GLMMcosinor/articles/model-specification.html","id":"using-summary-cosinor-glmm-r","dir":"Articles","previous_headings":"","what":"Using: ‘summary.cosinor.glmm.R’","title":"model-specification","text":"summary() method cosinor.glmm objects provides detailed summary model parameter estimates uncertainty. outputs estimates, standard errors, confidence intervals, \\(p\\)-values raw model parameters transformed parameters. summary statistics represent comparison groups cosinor components - role test_cosinor() function. example use summary(): summary statistics dispersion zero-inflation models also provided summary.cosinor.glmm() function, original cosinor.glmm object analysed contains . following demonstration uses model specified Dispersion Zero-inflation model specification section vignette: Note dataset simulated consideration dispersion zero-inflation characteristics, hence lack significant P-values model summary dispersion zero-inflation models.","code":"object <- cosinor.glmm(   Y ~ group + amp_acro(times,     period = 12,     group = \"group\"   ),   data = testdata_simple,   family = poisson() ) summary(object) #>  #>  Conditional Model  #> Raw model coefficients: #>                      estimate standard.error     lower.CI upper.CI    p.value #> (Intercept)       4.998454143    0.003463730  4.991665357  5.00524 < 2.22e-16 #> group1           -1.002150001    0.005937109 -1.013786521 -0.99051 < 2.22e-16 #> group0:main_rrr1  1.082281784    0.003347565  1.075720677  1.08884 < 2.22e-16 #> group1:main_rrr1  0.876651962    0.006198710  0.864502713  0.88880 < 2.22e-16 #> group0:main_sss1  1.682350718    0.003919418  1.674668800  1.69003 < 2.22e-16 #> group1:main_sss1  0.481951764    0.005936670  0.470316105  0.49359 < 2.22e-16 #>                      #> (Intercept)      *** #> group1           *** #> group0:main_rrr1 *** #> group1:main_rrr1 *** #> group0:main_sss1 *** #> group1:main_sss1 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Transformed coefficients: #>                    estimate standard.error     lower.CI upper.CI    p.value     #> (Intercept)     4.998454143    0.003463730  4.991665357  5.00524 < 2.22e-16 *** #> [group=1]      -1.002150001    0.005937109 -1.013786521 -0.99051 < 2.22e-16 *** #> [group=0]:amp1  2.000409408    0.004275553  1.992029478  2.00879 < 2.22e-16 *** #> [group=1]:amp1  1.000398004    0.007530397  0.985638697  1.01516 < 2.22e-16 *** #> [group=0]:acr1  0.999134804    0.002034131  0.995147980  1.00312 < 2.22e-16 *** #> [group=1]:acr1  0.502662068    0.007562019  0.487840783  0.51748 < 2.22e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 summary(object_disp_zi) #>  #>  Conditional Model  #> Raw model coefficients: #>                      estimate standard.error     lower.CI upper.CI    p.value #> (Intercept)       7.016729100    0.031330803  6.955321854  7.07814 < 2.22e-16 #> group1           -2.603367830    0.044244036 -2.690084547 -2.51665 < 2.22e-16 #> group0:main_rrr1  0.066942896    0.044793832 -0.020851401  0.15474 0.13505365 #> group1:main_rrr1  1.117618164    0.045465939  1.028506561  1.20673 < 2.22e-16 #> group0:main_sss1  0.108633077    0.043794639  0.022797161  0.19447 0.01311943 #> group1:main_sss1  1.722452338    0.042703935  1.638754163  1.80615 < 2.22e-16 #> group0:main_rrr2  0.073119823    0.044860494 -0.014805130  0.16104 0.10311460 #> group1:main_rrr2  0.017004741    0.044676041 -0.070558690  0.10457 0.70348281 #> group0:main_sss2  0.415101010    0.043687914  0.329474271  0.50073 < 2.22e-16 #> group1:main_sss2 -1.030063253    0.043498767 -1.115319270 -0.94481 < 2.22e-16 #> group0:main_rrr3  0.496466374    0.044144820  0.409944117  0.58299 < 2.22e-16 #> group1:main_rrr3  0.157474752    0.043924524  0.071384266  0.24357 0.00033692 #> group0:main_sss3  0.006004598    0.044446111 -0.081108180  0.09312 0.89253408 #> group1:main_sss3 -0.360206539    0.044008588 -0.446461786 -0.27395  2.725e-16 #>                      #> (Intercept)      *** #> group1           *** #> group0:main_rrr1     #> group1:main_rrr1 *** #> group0:main_sss1 *   #> group1:main_sss1 *** #> group0:main_rrr2     #> group1:main_rrr2     #> group0:main_sss2 *** #> group1:main_sss2 *** #> group0:main_rrr3 *** #> group1:main_rrr3 *** #> group0:main_sss3     #> group1:main_sss3 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Transformed coefficients: #>                   estimate standard.error    lower.CI upper.CI    p.value     #> (Intercept)     7.01672910     0.03133080  6.95532185  7.07814 < 2.22e-16 *** #> [group=1]      -2.60336783     0.04424404 -2.69008455 -2.51665 < 2.22e-16 *** #> [group=0]:amp1  0.12760289     0.04352474  0.04229597  0.21291  0.0033708 **  #> [group=1]:amp1  2.05326872     0.06125435  1.93321240  2.17333 < 2.22e-16 *** #> [group=0]:amp2  0.42149182     0.06005682  0.30378261  0.53920 2.2472e-12 *** #> [group=1]:amp2  1.03020360     0.06174401  0.90918757  1.15122 < 2.22e-16 *** #> [group=0]:amp3  0.49650268     0.06406640  0.37093484  0.62207 9.2027e-15 *** #> [group=1]:amp3  0.39312472     0.06244272  0.27073925  0.51551 3.0589e-10 *** #> [group=0]:acr1  1.01852883     0.34465904  0.34300953  1.69405  0.0031249 **  #> [group=1]:acr1  0.99522794     0.03036568  0.93571230  1.05474 < 2.22e-16 *** #> [group=0]:acr2  1.39643556     0.14500267  1.11223555  1.68064 < 2.22e-16 *** #> [group=1]:acr2 -1.55428938     0.06142615 -1.67468242 -1.43390 < 2.22e-16 *** #> [group=0]:acr3  0.01209408     0.12663294 -0.23610191  0.26029  0.9239137     #> [group=1]:acr3 -1.15865531     0.15995508 -1.47216151 -0.84515 4.3683e-13 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> *********************** #>  #>  Dispersion Model  #> Raw model coefficients: #>                       estimate standard.error      lower.CI upper.CI  p.value   #> (Intercept)      -0.0288587427   0.0448242858 -0.1167127285  0.05900 0.519693   #> group1           -0.0066200173   0.0633913834 -0.1308648456  0.11762 0.916827   #> group0:disp_rrr1 -0.1357179352   0.0643768223 -0.2618941885 -0.00954 0.035015 * #> group1:disp_rrr1 -0.0951167834   0.0643517754 -0.2212439455  0.03101 0.139388   #> group0:disp_sss1  0.0166204352   0.0625406928 -0.1059570702  0.13920 0.790429   #> group1:disp_sss1  0.0313515460   0.0625367638 -0.0912182587  0.15392 0.616139   #> group0:disp_rrr2 -0.0200890740   0.0641438216 -0.1458086542  0.10563 0.754138   #> group1:disp_rrr2  0.0642754087   0.0633556513 -0.0598993860  0.18845 0.310336   #> group0:disp_sss2 -0.0001228052   0.0631847006 -0.1239625428  0.12372 0.998449   #> group1:disp_sss2  0.0104643694   0.0637662615 -0.1145152067  0.13544 0.869648   #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Transformed coefficients: #>                     estimate standard.error      lower.CI upper.CI    p.value #> (Intercept)     -0.028858743    0.044824286  -0.116712729  0.05900  0.5196926 #> [group=1]       -0.006620017    0.063391383  -0.130864846  0.11762  0.9168274 #> [group=0]:amp1   0.136731843    0.064532180   0.010251094  0.26321  0.0341060 #> [group=1]:amp1   0.100150496    0.091450221  -0.079088644  0.27939  0.2734567 #> [group=0]:amp2   0.020089449    0.091025332  -0.158316924  0.19850  0.8253247 #> [group=1]:amp2   0.065121665    0.089739756  -0.110765024  0.24101  0.4680396 #> [group=0]:acr1   3.019736333    0.458967646   2.120176277  3.91930 4.7232e-11 #> [group=1]:acr1   2.823195857    0.892559058   1.073812249  4.57258  0.0015613 #> [group=0]:acr2  -3.135479697    4.437575151 -11.832967172  5.56201  0.4798306 #> [group=1]:acr2   0.161389218    1.363280108  -2.510590694  2.83337  0.9057642 #>                    #> (Intercept)        #> [group=1]          #> [group=0]:amp1 *   #> [group=1]:amp1     #> [group=0]:amp2     #> [group=1]:amp2     #> [group=0]:acr1 *** #> [group=1]:acr1 **  #> [group=0]:acr2     #> [group=1]:acr2     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> *********************** #>  #>  Zero-Inflation Model  #> Raw model coefficients: #>                     estimate standard.error      lower.CI  upper.CI p.value #> (Intercept)    -2.350377e+01   4.031451e+03 -7.925002e+03  7877.995 0.99535 #> group1          1.553182e+00   4.443043e+03 -8.706651e+03  8709.757 0.99972 #> group0:zi_rrr1  1.102653e-02   5.825855e+03 -1.141846e+04 11418.478 1.00000 #> group1:zi_rrr1  1.440763e-02   2.661998e+03 -5.217406e+03  5217.435 1.00000 #> group0:zi_sss1  5.469426e-03   5.809542e+03 -1.138649e+04 11386.498 1.00000 #> group1:zi_sss1  9.917540e-02   2.668340e+03 -5.229752e+03  5229.950 0.99997 #> group0:zi_rrr2 -1.231592e-02   5.764607e+03 -1.129843e+04 11298.410 1.00000 #> group1:zi_rrr2 -3.912355e-02   2.641582e+03 -5.177444e+03  5177.366 0.99999 #> group0:zi_sss2  2.794418e-03   5.860806e+03 -1.148697e+04 11486.971 1.00000 #> group1:zi_sss2  8.156093e-02   2.680536e+03 -5.253672e+03  5253.835 0.99998 #> group0:zi_rrr3 -6.573927e-03   5.662774e+03 -1.109884e+04 11098.827 1.00000 #> group1:zi_rrr3 -7.074734e-02   2.590875e+03 -5.078093e+03  5077.951 0.99998 #> group0:zi_sss3  4.172874e-03   5.729682e+03 -1.122997e+04 11229.975 1.00000 #> group1:zi_sss3  4.503088e-02   2.620305e+03 -5.135659e+03  5135.749 0.99999 #>  #> Transformed coefficients: #>                     estimate standard.error      lower.CI    upper.CI p.value #> (Intercept)    -2.350377e+01   4.031451e+03 -7.925002e+03    7877.995 0.99535 #> [group=1]       1.553182e+00   4.443043e+03 -8.706651e+03    8709.757 0.99972 #> [group=0]:amp1  1.230849e-02   5.725487e+03 -1.122174e+04   11221.760 1.00000 #> [group=1]:amp1  1.002165e-01   6.355624e+03 -1.245669e+04   12456.893 0.99999 #> [group=0]:amp2  1.262896e-02   7.821632e+03 -1.533010e+04   15330.130 1.00000 #> [group=1]:amp2  9.045903e-02   6.476281e+03 -1.269319e+04   12693.368 0.99999 #> [group=0]:amp3  7.786488e-03   8.066109e+03 -1.580927e+04   15809.290 1.00000 #> [group=1]:amp3  8.386278e-02   6.452965e+03 -1.264749e+04   12647.663 0.99999 #> [group=0]:acr1  4.604620e-01   4.643501e+05 -9.101089e+05  910109.858 1.00000 #> [group=1]:acr1  1.426531e+00   6.353625e+04 -1.245273e+05  124530.193 0.99998 #> [group=0]:acr2  2.918475e+00   6.060328e+05 -1.187799e+06 1187805.330 1.00000 #> [group=1]:acr2  2.018060e+00   7.158417e+04 -1.403004e+05  140304.419 0.99998 #> [group=0]:acr3  2.576005e+00   1.052082e+06 -2.062040e+06 2062045.251 1.00000 #> [group=1]:acr3  2.574764e+00   7.693245e+04 -1.507823e+05  150787.405 0.99997"},{"path":"https://rwparsons.github.io/GLMMcosinor/articles/model-visualisations.html","id":"plotting-cosinor-glmm-objects","dir":"Articles","previous_headings":"","what":"Plotting cosinor.glmm objects","title":"model-visualisations","text":"GLMMcosinor package includes two ways visualise cosinor.glmm objects. Firstly, function ggplot.cosinor.glmm() creates time-response plot fitted model:  function also allows users superimpose datapoints (fit based ) fitted model, using superimpose.data = TRUE argument:  multiple factors model, user can specify covariate plotted using x_str argument accepts string corresponding group name within original dataset. default, x_str = NULL intercept plotted (group levels = 0). following examples demonstrate x_str can used produce different plots model. Note predict.ribbon can set FALSE remove prediction interval plots.    default, xmin set minimum time value time vector original dataframe, xmax set maximum time value. want focus specific region plot, can define use xlims argument specify x-bounds. example, plot , can adjust xlimits:  increase resolution plots, pred.length.can increased. multiple periods, function automatically generate appropriate number points plot smallest period sufficient resolution appreciate cosinor behaviour. can adjusted using points_per_min_cycle_length argument 20 default.","code":"object <- cosinor.glmm(   Y ~ X + amp_acro(time,     group = \"X\",     period = 12   ),   data = vitamind ) autoplot(object, x_str = \"X\") object <- cosinor.glmm(   Y ~ X + amp_acro(time,     group = \"X\",     period = 12   ),   data = vitamind ) autoplot(object, x_str = \"X\", superimpose.data = TRUE) testdata_two_components_mod <- testdata_two_components testdata_two_components_mod$X <- rbinom(length(testdata_two_components$group),   2,   prob = 0.5 ) object <- cosinor.glmm(   Y ~ group + amp_acro(times,     n_components = 2,     period = c(12, 6),     group = c(\"group\", \"X\")   ),   data = testdata_two_components_mod,   family = poisson() ) autoplot(object, predict.ribbon = FALSE) object <- cosinor.glmm(   Y ~ group + amp_acro(times,     n_components = 2,     period = c(12, 6),     group = c(\"group\", \"X\")   ),   data = testdata_two_components_mod,   family = poisson() ) autoplot(object, x_str = \"X\", predict.ribbon = FALSE) object <- cosinor.glmm(   Y ~ group + amp_acro(times,     n_components = 2,     period = c(12, 6),     group = c(\"group\", \"X\")   ),   data = testdata_two_components_mod,   family = poisson() ) autoplot(object, x_str = \"group\", predict.ribbon = FALSE) object <- cosinor.glmm(   Y ~ group + amp_acro(times,     n_components = 2,     period = c(12, 6),     group = c(\"group\", \"X\")   ),   data = testdata_two_components_mod,   family = poisson() ) autoplot(object, x_str = \"group\", predict.ribbon = TRUE, xlims = c(13, 15)) object <- cosinor.glmm(   Y ~ amp_acro(times,     n_components = 2,     period = c(12, 1000)   ),   data = testdata_period_diff,   family = poisson() )  autoplot(object, points_per_min_cycle_length = 40)"},{"path":"https://rwparsons.github.io/GLMMcosinor/articles/model-visualisations.html","id":"polar-plots","dir":"Articles","previous_headings":"","what":"Polar plots","title":"model-visualisations","text":"addition time-response plots, GLMMcosinor package also allows users create polar plots. plots, plotted point represents acrophase estimate, radius represents amplitude estimate given component. ellipses represent confidence regions. angle units plot can specified radial_units argument. default, units radians complete revolution plot \\((2\\pi)\\) represents period component. units can changed degrees (\\(360^\\circ\\) represents period), even expressed units period specification time variable data used fit model. default, function creates polar plots components combines together using make_cowplot = TRUE argument. user wishes plot just one component, can specify using component_index. direction angle increases can changed clockwise argument, location angle = 0 starting point can specified start argument. Hence, user wishes create polar plot resembles clock, can done specifying clockwise = TRUE start = \"top\". argument: overlay_parameter_info can used create line extending origin parameter estimate (visualise amplitude estimate), circular arc extending angle starting position (0) acrophase estimate. background grid can also customised. argument grid_angle_segments used specify many sectors polar grid , `n_breaks` argument can used specify number concentric circles make polar grid. user wishes zoom confidence ellipses show relevant information, can adjust view default full (plots full view polar plot) ‘zoom’ (enlarges smallest view window containing confidence ellipses), zoom_origin (enlarges smallest view window containing confidence ellipses origin).  angle units plot can specified ‘radial_units’ argument. default, units radians complete revolution plot (2*pi) represents maximum period model. units can changed degrees, even expressed units period specification.  default, function creates creates polar plots components stiches together using make_cowplot = TRUE argument. user wishes plot just one component, can specify using ‘component_index’, though ‘make_cowplot’ argument must FALSE register. direction angle increases can changed clockwise argument, location angle = 0 starting point can specified ‘start’ argument. Hence, user wishes create polar plot resembles clock, can done specifying clockwise = TRUE start = “top”. argument: overlay_parameter_info can used create line extending origin parameter estimate (visualise amplitude estimate), circular arc extending angle starting position (0) acrophase estimate.  background grid can also customised. argument grid_angle_segments used specify many sectors polar grid , n_breaks argument can used specify number concentric circles.  user wishes zoom confidence ellipses show releveant information, can adjust view default ‘full’ (plots full view polar plot) ‘zoom’ (enlarges smallest view window containing confidence ellipses), ‘zoom_origin’ (enlarges smallest view window containing confidence ellipses origin).","code":"model <- cosinor.glmm(   Y ~ X + amp_acro(time,     group = \"X\",     period = 12   ),   data = vitamind ) polar_plot(model) model <- cosinor.glmm(   Y ~ X + amp_acro(time,     group = \"X\",     period = 12   ),   data = vitamind ) polar_plot(model, radial_units = \"degrees\") model <- cosinor.glmm(   Y ~ X + amp_acro(time,     group = \"X\",     period = 12   ),   data = vitamind ) polar_plot(model, overlay_parameter_info = TRUE) model <- cosinor.glmm(   Y ~ X + amp_acro(time,     group = \"X\",     period = 12   ),   data = vitamind ) polar_plot(model,   grid_angle_segments = 12,   clockwise = TRUE,   start = \"top\",   n_breaks = 5 ) model <- cosinor.glmm(   Y ~ X + amp_acro(time,     group = \"X\",     period = 12   ),   data = vitamind ) polar_plot(model,   grid_angle_segments = 12,   clockwise = TRUE,   start = \"top\",   view = \"zoom_origin\" )"},{"path":"https://rwparsons.github.io/GLMMcosinor/articles/multiple-components.html","id":"generating-a-two-component-model","dir":"Articles","previous_headings":"","what":"Generating a two-component model","title":"multiple-components","text":"generate multi-component model, set n_components amp_acro() part formula desired number components. , optionally assign groups component group argument. one group entry supplied n_components greater 1, single group entry matched component. period argument must also match length n_components, order periods corresponds assigned component. example, n_components = 2, period = c(12,6), first component period 12 second period 6. Similarly group argument, one period supplied despite n_components greater 1, period matched component. example: output, suffix estimates amplitude acrophase represents component: [group=0]:amp1 = 0.10205represents estimate amplitude group 0 first component [group=1]:amp1 = 1.99964represents estimate amplitude group 1 first component [group=0]:amp2 = 0.40175represnts estimate amplitude group 0 second component [group=1]:amp2 = 1.00057represnts estimate amplitude group 1 second component Similarly acrophase estimates  multicomponent model one component grouped components aren’t, vector input group must still length n_components non-grouped components represented group = NA. example, wanted first component grouped component, specify group argument group = c(\"group\", NA)) . , first component grouped group, second component grouped. data simulated second component groups. interpret output transformed coefficients follows: MESOR group 0 3.69558. MESOR difference group 0 group 1 [group=1] = 0.31184 estimate amplitude first component group 0 [group=0]:amp1 = 0.10752 estimate amplitude first component group 1 [group=1]:amp1 = 1.99248 estimate amplitude second component amp2 = 0.39795and group 0 group 1 estimate acrophase first component group 0 [group=0]:acr1 = 1.09273radians estimate acrophase first component group 1 [group=1]:acr1 = 0.99984radians estimate acrophase second component acr2 = 1.50512radians group 0 group 1  example, strictly necessary specify group = c(\"group\", NA)) since specifying group = c(\"group\",\"group\")still yields accurate estimates: multicomponent model specified (n_components > 1) length group period 1, assumed one group /period values specified apply components. example, n_components = 2 , group = \"group\", one element group vector replicated produce group = c(\"group\",\"group\")now length matches n_components. applies period. instance, following two cosinor.glmm() calls fit models:","code":"object <- cosinor.glmm(   Y ~ group + amp_acro(     time_col = times,     n_components = 2,     period = c(12, 6),     group = c(\"group\", \"group\")   ),   data = testdata_two_components,   family = poisson() ) object #>  #>  Conditional Model  #>  #>  Raw formula:  #> Y ~ group + group:main_rrr1 + group:main_sss1 + group:main_rrr2 +      group:main_sss2  #>  #>  Raw Coefficients:  #>                  Estimate #> (Intercept)       6.99894 #> group1           -2.60342 #> group0:main_rrr1  0.05248 #> group1:main_rrr1  1.08250 #> group0:main_sss1  0.08753 #> group1:main_sss1  1.68129 #> group0:main_rrr2  0.02926 #> group1:main_rrr2  0.06860 #> group0:main_sss2  0.40068 #> group1:main_sss2 -0.99822 #>  #>  Transformed Coefficients:  #>                Estimate #> (Intercept)     6.99894 #> [group=1]      -2.60342 #> [group=0]:amp1  0.10205 #> [group=1]:amp1  1.99964 #> [group=0]:amp2  0.40175 #> [group=1]:amp2  1.00057 #> [group=0]:acr1  1.03070 #> [group=1]:acr1  0.99875 #> [group=0]:acr2  1.49790 #> [group=1]:acr2 -1.50218 autoplot(object) object <- cosinor.glmm(   Y ~ group + amp_acro(     time_col = times,     n_components = 2,     period = c(12, 6),     group = c(\"group\", NA)   ),   data = testdata_two_components_grouped,   family = poisson() ) object #>  #>  Conditional Model  #>  #>  Raw formula:  #> Y ~ group + main_rrr2 + main_sss2 + group:main_rrr1 + group:main_sss1  #>  #>  Raw Coefficients:  #>                  Estimate #> (Intercept)       3.69558 #> group1            0.31184 #> main_rrr2         0.02612 #> main_sss2         0.39710 #> group0:main_rrr1  0.04946 #> group1:main_rrr1  1.07681 #> group0:main_sss1  0.09546 #> group1:main_sss1  1.67644 #>  #>  Transformed Coefficients:  #>                Estimate #> (Intercept)     3.69558 #> [group=1]       0.31184 #> [group=0]:amp1  0.10752 #> [group=1]:amp1  1.99248 #> amp2            0.39795 #> [group=0]:acr1  1.09273 #> [group=1]:acr1  0.99984 #> acr2            1.50512 autoplot(object, superimpose.data = TRUE) object <- cosinor.glmm(   Y ~ group + amp_acro(     time_col = times,     n_components = 2,     period = c(12, 6),     group = c(\"group\", \"group\")   ),   data = testdata_two_components_grouped,   family = poisson() ) object #>  #>  Conditional Model  #>  #>  Raw formula:  #> Y ~ group + group:main_rrr1 + group:main_sss1 + group:main_rrr2 +      group:main_sss2  #>  #>  Raw Coefficients:  #>                  Estimate #> (Intercept)       3.69549 #> group1            0.31048 #> group0:main_rrr1  0.05027 #> group1:main_rrr1  1.07082 #> group0:main_sss1  0.09515 #> group1:main_sss1  1.68461 #> group0:main_rrr2  0.01368 #> group1:main_rrr2  0.03613 #> group0:main_sss2  0.39617 #> group1:main_sss2  0.39776 #>  #>  Transformed Coefficients:  #>                Estimate #> (Intercept)     3.69549 #> [group=1]       0.31048 #> [group=0]:amp1  0.10761 #> [group=1]:amp1  1.99614 #> [group=0]:amp2  0.39641 #> [group=1]:amp2  0.39939 #> [group=0]:acr1  1.08472 #> [group=1]:acr1  1.00457 #> [group=0]:acr2  1.53629 #> [group=1]:acr2  1.48022 cosinor.glmm(   Y ~ group + amp_acro(times,     n_components = 2,     period = 12,     group = \"group\"   ),   data = testdata_two_components,   family = poisson() ) #>  #>  Conditional Model  #>  #>  Raw formula:  #> Y ~ group + group:main_rrr1 + group:main_sss1 + group:main_rrr2 +      group:main_sss2  #>  #>  Raw Coefficients:  #>                  Estimate #> (Intercept)       7.04448 #> group1           -2.22027 #> group0:main_rrr1  0.03611 #> group1:main_rrr1  0.19746 #> group0:main_sss1  0.05646 #> group1:main_sss1  0.55588 #> group0:main_rrr2  0.03611 #> group1:main_rrr2  0.19746 #> group0:main_sss2  0.05646 #> group1:main_sss2  0.55588 #>  #>  Transformed Coefficients:  #>                Estimate #> (Intercept)     7.04448 #> [group=1]      -2.22027 #> [group=0]:amp1  0.06702 #> [group=1]:amp1  0.58991 #> [group=0]:amp2  0.06702 #> [group=1]:amp2  0.58991 #> [group=0]:acr1  1.00180 #> [group=1]:acr1  1.22948 #> [group=0]:acr2  1.00180 #> [group=1]:acr2  1.22948   cosinor.glmm(   Y ~ group + amp_acro(times,     n_components = 2,     period = c(12, 12),     group = c(\"group\", \"group\")   ),   data = testdata_two_components,   family = poisson() ) #>  #>  Conditional Model  #>  #>  Raw formula:  #> Y ~ group + group:main_rrr1 + group:main_sss1 + group:main_rrr2 +      group:main_sss2  #>  #>  Raw Coefficients:  #>                  Estimate #> (Intercept)       7.04448 #> group1           -2.22027 #> group0:main_rrr1  0.03611 #> group1:main_rrr1  0.19746 #> group0:main_sss1  0.05646 #> group1:main_sss1  0.55588 #> group0:main_rrr2  0.03611 #> group1:main_rrr2  0.19746 #> group0:main_sss2  0.05646 #> group1:main_sss2  0.55588 #>  #>  Transformed Coefficients:  #>                Estimate #> (Intercept)     7.04448 #> [group=1]      -2.22027 #> [group=0]:amp1  0.06702 #> [group=1]:amp1  0.58991 #> [group=0]:amp2  0.06702 #> [group=1]:amp2  0.58991 #> [group=0]:acr1  1.00180 #> [group=1]:acr1  1.22948 #> [group=0]:acr2  1.00180 #> [group=1]:acr2  1.22948"},{"path":"https://rwparsons.github.io/GLMMcosinor/articles/multiple-components.html","id":"generating-a-three-component-model","dir":"Articles","previous_headings":"","what":"Generating a three-component model","title":"multiple-components","text":"plot shows 3-component model simulated data overlayed:","code":"object <- cosinor.glmm(   Y ~ group + amp_acro(times,     n_components = 3,     period = c(12, 6, 12),     group = \"group\"   ),   data = testdata_three_components,   family = poisson() ) autoplot(object,   superimpose.data = TRUE,   x_str = \"group\",   predict.ribbon = FALSE,   data_opacity = 0.08 )"},{"path":"https://rwparsons.github.io/GLMMcosinor/articles/multiple-components.html","id":"generating-models-with-n-components","dir":"Articles","previous_headings":"","what":"Generating models with n-components","title":"multiple-components","text":"Generating model n components simply involves setting n_components number desired components ensuring period argument vector element corresponds period respective component.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Rex Parsons. Author, maintainer. Oliver Jayasinghe. Author. Nicole White. Author.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Parsons R, Jayasinghe O, White N (2023). GLMMcosinor: Fit cosinor model using generalised mixed modelling framework. https://github.com/RWParsons/GLMMcosinor, https://rwparsons.github.io/GLMMcosinor/.","code":"@Manual{,   title = {GLMMcosinor: Fit a cosinor model using a generalised mixed modelling framework},   author = {Rex Parsons and Oliver Jayasinghe and Nicole White},   year = {2023},   note = {https://github.com/RWParsons/GLMMcosinor, https://rwparsons.github.io/GLMMcosinor/}, }"},{"path":"https://rwparsons.github.io/GLMMcosinor/index.html","id":"glmmcosinor-","dir":"","previous_headings":"","what":"Fit a cosinor model using a generalised mixed modelling framework","title":"Fit a cosinor model using a generalised mixed modelling framework","text":"goal GLMMcosinor fit cosinor model rhythmic data allow functionality generalised linear (mixed-) model (GLM) framework using glmmTMB. example, includes ability use link functions appropriate outcome variables Gaussian, Poisson, Gamma, Binomial. Existing statistical software circadian data analyses (including cosinor circacompare) allow user fit data using regression model, many limited due lack able specify link function, multiple components, hierarchical structure. GLMMcosinor aims comprehensive flexible improvement implementations cosinor model R Python. See table features available within currently available methods.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Fit a cosinor model using a generalised mixed modelling framework","text":"can install development version GLMMcosinor GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"RWParsons/GLMMcosinor\")"},{"path":"https://rwparsons.github.io/GLMMcosinor/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Fit a cosinor model using a generalised mixed modelling framework","text":"basic example shows solve common problem:","code":"library(GLMMcosinor) data(vitamind) model <- cosinor.glmm(Y ~ X + amp_acro(time, group = \"X\", period = 12), data = vitamind) summary(model) #>  #>  Conditional Model  #> Raw model coefficients: #>                estimate standard.error   lower.CI upper.CI    p.value     #> (Intercept)  29.6897959      0.4583696 28.7914079 30.58818 < 2.22e-16 *** #> X1            1.9018623      0.7919688  0.3496320  3.45409   0.016331 *   #> X0:main_rrr1  0.9307876      0.6260656 -0.2962784  2.15785   0.137087     #> X1:main_rrr1  6.5102900      0.9303406  4.6868560  8.33372 2.6011e-12 *** #> X0:main_sss1  6.2009896      0.6701952  4.8874311  7.51455 < 2.22e-16 *** #> X1:main_sss1  4.8184618      0.8963299  3.0616875  6.57524 7.6257e-08 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Transformed coefficients: #>               estimate standard.error   lower.CI upper.CI    p.value     #> (Intercept) 29.6897959      0.4583696 28.7914079 30.58818 < 2.22e-16 *** #> [X=1]        1.9018623      0.7919688  0.3496320  3.45409   0.016331 *   #> [X=0]:amp1   6.2704576      0.6696564  4.9579551  7.58296 < 2.22e-16 *** #> [X=1]:amp1   8.0994722      1.1028357  5.9379540 10.26099 2.0696e-13 *** #> [X=0]:acr1   1.4218056      0.1000725  1.2256670  1.61794 < 2.22e-16 *** #> [X=1]:acr1   0.6371544      0.1360809  0.3704408  0.90387 2.8385e-06 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 autoplot(model, superimpose.data = TRUE) polar_plot(model)"},{"path":"https://rwparsons.github.io/GLMMcosinor/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Fit a cosinor model using a generalised mixed modelling framework","text":"","code":"citation(\"GLMMcosinor\") #> Warning in citation(\"GLMMcosinor\"): no date field in DESCRIPTION file of #> package 'GLMMcosinor' #>  #> To cite package 'GLMMcosinor' in publications use: #>  #>   Parsons R, Jayasinghe O, White N (2023). _GLMMcosinor: Fit a cosinor #>   model using a generalised mixed modelling framework_. #>   https://github.com/RWParsons/GLMMcosinor, #>   https://rwparsons.github.io/GLMMcosinor/. #>  #> A BibTeX entry for LaTeX users is #>  #>   @Manual{, #>     title = {GLMMcosinor: Fit a cosinor model using a generalised mixed modelling #> framework}, #>     author = {Rex Parsons and Oliver Jayasinghe and Nicole White}, #>     year = {2023}, #>     note = {https://github.com/RWParsons/GLMMcosinor, #> https://rwparsons.github.io/GLMMcosinor/}, #>   }"},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/GLMMcosinor-package.html","id":null,"dir":"Reference","previous_headings":"","what":"GLMMcosinor: A package for fitting generalized linear mixed-effects\nmodels with cosinor terms — GLMMcosinor-package","title":"GLMMcosinor: A package for fitting generalized linear mixed-effects\nmodels with cosinor terms — GLMMcosinor-package","text":"learn use GLMMcosinor, see vignettes website using following code: browseVignettes(package = \"GLMMcosinor\") package provides functions fitting generalized linear mixed-effects models cosinor terms. Cosinor terms can used model periodic variations time series data, particularly useful chronobiology sleep research. package uses flexible GLMMtmb framework allows users specify wide range data families, provides tools visualization.","code":""},{"path":[]},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/GLMMcosinor-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"GLMMcosinor: A package for fitting generalized linear mixed-effects\nmodels with cosinor terms — GLMMcosinor-package","text":"Maintainer: Rex Parsons rex.parsons94@gmail.com (ORCID) Authors: Oliver Jayasinghe Nicole White (ORCID)","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/amp_acro.html","id":null,"dir":"Reference","previous_headings":"","what":"Used to specify a cosinor component in the model formula. — amp_acro","title":"Used to specify a cosinor component in the model formula. — amp_acro","text":"Checks validity user inputs creating updated formula associated modifications data.frame.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/amp_acro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Used to specify a cosinor component in the model formula. — amp_acro","text":"","code":"amp_acro(time_col, n_components = 1, group, period, ...)"},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/amp_acro.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Used to specify a cosinor component in the model formula. — amp_acro","text":"time_col  numeric column within data.frame() passed via data arg containing time values. n_components Number cosinor components model. group vector names group factors (column names within data.frame() passed via data arg). period numeric value vector containing period. number values equal n_components. ... Extra arguments use within GLMMcosinor.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/amp_acro.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Used to specify a cosinor component in the model formula. — amp_acro","text":"data.frame formula appropriate use data_processor().","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/amp_acro.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Used to specify a cosinor component in the model formula. — amp_acro","text":"","code":"# Single component cosinor model cosinor.glmm(   Y ~ amp_acro(time_col = time, group = \"X\", period = 12),   data = vitamind ) #> Warning: Package version inconsistency detected. #> TMB was built with Matrix version 1.6.1 #> Current Matrix version is 1.5.4.1 #> Please re-install 'TMB' from source using install.packages('TMB', type = 'source') or ask CRAN for a binary version of 'TMB' matching CRAN's 'Matrix' package #>  #>  Conditional Model  #>  #>  Raw formula:  #> Y ~ X:main_rrr1 + X:main_sss1  #>  #>  Raw Coefficients:  #>              Estimate #> (Intercept)  30.32687 #> X0:main_rrr1  0.86520 #> X1:main_rrr1  6.47625 #> X0:main_sss1  6.24438 #> X1:main_sss1  4.66701 #>  #>  Transformed Coefficients:  #>             Estimate #> (Intercept) 30.32687 #> [X=0]:amp    6.30404 #> [X=1]:amp    7.98266 #> [X=0]:acr    1.43312 #> [X=1]:acr    0.62444  # 2-component cosinor model with simulated data sim_data <- simulate_cosinor(   n = 500,   mesor = 5,   amp = c(2, 1),   acro = c(1, 1.5),   beta.mesor = 2,   beta.amp = c(2, 1),   beta.acro = c(1, 1.5),   family = \"gaussian\",   period = c(12, 6),   n_components = 2,   beta.group = TRUE, )  cosinor.glmm(   Y ~ group + amp_acro(times,     n_components = 2,     group = \"group\",     period = c(12, 6)   ),   data = sim_data,   family = gaussian ) #>  #>  Conditional Model  #>  #>  Raw formula:  #> Y ~ group + group:main_rrr1 + group:main_sss1 + group:main_rrr2 +      group:main_sss2  #>  #>  Raw Coefficients:  #>                  Estimate #> (Intercept)       4.98879 #> group1           -2.98297 #> group0:main_rrr1  1.18389 #> group1:main_rrr1  1.07245 #> group0:main_sss1  1.63015 #> group1:main_sss1  1.68735 #> group0:main_rrr2  0.00047 #> group1:main_rrr2 -0.02454 #> group0:main_sss2  1.17201 #> group1:main_sss2  0.93660 #>  #>  Transformed Coefficients:  #>                Estimate #> (Intercept)     4.98879 #> [group=1]      -2.98297 #> [group=0]:amp1  2.01470 #> [group=1]:amp1  1.99933 #> [group=0]:amp2  1.17201 #> [group=1]:amp2  0.93693 #> [group=0]:acr1  0.94267 #> [group=1]:acr1  1.00463 #> [group=0]:acr2  1.57039 #> [group=1]:acr2  1.59699"},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/autoplot.cosinor.glmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a cosinor model — autoplot.cosinor.glmm","title":"Plot a cosinor model — autoplot.cosinor.glmm","text":"Given cosinor.glmm model fit, generate plot data fitted values. Optionally allows plotting covariates","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/autoplot.cosinor.glmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a cosinor model — autoplot.cosinor.glmm","text":"","code":"# S3 method for cosinor.glmm autoplot(   object,   ci_level = 0.95,   x_str,   type = \"response\",   xlims,   pred.length.out,   points_per_min_cycle_length = 20,   superimpose.data = FALSE,   data_opacity = 0.3,   predict.ribbon = TRUE,   ... )"},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/autoplot.cosinor.glmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a cosinor model — autoplot.cosinor.glmm","text":"object cosinor.glmm object. ci_level level calculated confidence intervals. Defaults 0.95. x_str character vector naming variable(s) plotted. Default value plots groups. type character passed argument predict.cosinor.glmm(), specifying type prediction (e.g, \"response\", \"link\"). See ?glmmTMB::predict.glmmTMB full list possible inputs. xlims vector length two containing limits x-axis. pred.length.integer value specifies number predicted data points. larger value, smooth fitted line appear. missing, uses points_per_min_cycle_length generate sensible default value. points_per_min_cycle_length Used determine number samples create plot pred.length.missing. points_per_min_cycle_length number points plotted per minimum cycle length (period) cosinor components model. superimpose.data logical. TRUE, data original data used fit model (object) superimposed predicted fit. data_opacity number 0 1 inclusive controls opacity superimposed data. (Used alpha calling ggplot2::geom_point()). predict.ribbon codelogical. TRUE, prediction interval plotted. ... Additional, ignored arguments.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/autoplot.cosinor.glmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a cosinor model — autoplot.cosinor.glmm","text":"Returns ggplot object.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/autoplot.cosinor.glmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a cosinor model — autoplot.cosinor.glmm","text":"","code":"model <- cosinor.glmm(   Y ~ X + amp_acro(time, group = \"X\", period = 12),   data = vitamind ) autoplot(model, x_str = \"X\")"},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/cosinor.glmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit cosinor model with {glmmTMB} — cosinor.glmm","title":"Fit cosinor model with {glmmTMB} — cosinor.glmm","text":"Given outcome time variable, fit cosinor model optional covariate effects.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/cosinor.glmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit cosinor model with {glmmTMB} — cosinor.glmm","text":"","code":"cosinor.glmm(   formula,   data,   family = stats::gaussian(),   quietly = TRUE,   dispformula = ~1,   ziformula = ~0,   ... )"},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/cosinor.glmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit cosinor model with {glmmTMB} — cosinor.glmm","text":"formula formula specifying cosinor model fit. cosinor portion formula controlled including amp_acro() right hand side formula. See amp_acro details. data data.frame containing variables used model. family family function character string naming family function. See ?family ?glmmTMB::family_glmmTMB options. quietly logical. TRUE, shows warning messages wrangling data fitting model. Defaults TRUE. dispformula one-sided (.e., response variable) formula dispersion combining fixed random effects, including cosinor components using amp_acro(). Defaults ~1. ziformula one-sided (.e., response variable) formula zero-inflation combining fixed random effects, including cosinor components using amp_acro(). Defaults ~0. ... Optional additional arguments passed glmmTMB::glmmTMB().","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/cosinor.glmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit cosinor model with {glmmTMB} — cosinor.glmm","text":"Returns fitted cosinor model cosinor.glmm object.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/cosinor.glmm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit cosinor model with {glmmTMB} — cosinor.glmm","text":"Tong, YL. Parameter Estimation Studying Circadian Rhythms, Biometrics (1976). 32(1):85--94.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/cosinor.glmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit cosinor model with {glmmTMB} — cosinor.glmm","text":"","code":"# Single component cosinor model cosinor.glmm(   Y ~ amp_acro(time_col = time, group = \"X\", period = 12),   data = vitamind ) #>  #>  Conditional Model  #>  #>  Raw formula:  #> Y ~ X:main_rrr1 + X:main_sss1  #>  #>  Raw Coefficients:  #>              Estimate #> (Intercept)  30.32687 #> X0:main_rrr1  0.86520 #> X1:main_rrr1  6.47625 #> X0:main_sss1  6.24438 #> X1:main_sss1  4.66701 #>  #>  Transformed Coefficients:  #>             Estimate #> (Intercept) 30.32687 #> [X=0]:amp    6.30404 #> [X=1]:amp    7.98266 #> [X=0]:acr    1.43312 #> [X=1]:acr    0.62444  # 2-component cosinor model with simulated data sim_data <- simulate_cosinor(   n = 500,   mesor = 5,   amp = c(2, 1),   acro = c(1, 1.5),   beta.mesor = 2,   beta.amp = c(2, 1),   beta.acro = c(1, 1.5),   family = \"gaussian\",   period = c(12, 6),   n_components = 2,   beta.group = TRUE, )  cosinor.glmm(   Y ~ group + amp_acro(times,     n_components = 2,     group = \"group\",     period = c(12, 6)   ),   data = sim_data,   family = gaussian ) #>  #>  Conditional Model  #>  #>  Raw formula:  #> Y ~ group + group:main_rrr1 + group:main_sss1 + group:main_rrr2 +      group:main_sss2  #>  #>  Raw Coefficients:  #>                  Estimate #> (Intercept)       5.05955 #> group1           -3.05003 #> group0:main_rrr1  1.08182 #> group1:main_rrr1  0.99879 #> group0:main_sss1  1.67327 #> group1:main_sss1  1.71808 #> group0:main_rrr2 -0.00057 #> group1:main_rrr2  0.15038 #> group0:main_sss2  0.91697 #> group1:main_sss2  0.99272 #>  #>  Transformed Coefficients:  #>                Estimate #> (Intercept)     5.05955 #> [group=1]      -3.05003 #> [group=0]:amp1  1.99253 #> [group=1]:amp1  1.98731 #> [group=0]:amp2  0.91697 #> [group=1]:amp2  1.00405 #> [group=0]:acr1  0.99686 #> [group=1]:acr1  1.04421 #> [group=0]:acr2  1.57142 #> [group=1]:acr2  1.42045"},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/fit_model_and_process.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit the cosinorGLMM model using the output from update_formula_and_data() and\na new formula — fit_model_and_process","title":"Fit the cosinorGLMM model using the output from update_formula_and_data() and\na new formula — fit_model_and_process","text":"Fit cosinorGLMM model using output update_formula_and_data() new formula","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/fit_model_and_process.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit the cosinorGLMM model using the output from update_formula_and_data() and\na new formula — fit_model_and_process","text":"","code":"fit_model_and_process(obj, formula, ...)"},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/fit_model_and_process.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit the cosinorGLMM model using the output from update_formula_and_data() and\na new formula — fit_model_and_process","text":"obj Output update_formula_and_data(). formula (optionally) new formula use fitting cosinor model (maybe random effects) covariates found data. ... Optional additional arguments passed glmmTMB::glmmTMB().","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/fit_model_and_process.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit the cosinorGLMM model using the output from update_formula_and_data() and\na new formula — fit_model_and_process","text":"Returns fitted cosinor model cosinor.glmm object.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/fit_model_and_process.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit the cosinorGLMM model using the output from update_formula_and_data() and\na new formula — fit_model_and_process","text":"","code":"# Use vitamind data but add a \"patient\" identifier used as a random effect vitamind2 <- vitamind vitamind2$patient <- sample(   LETTERS[1:5],   size = nrow(vitamind2), replace = TRUE )  # Use update_formula_and_data() to perform wrangling steps of cosinor.glmm() # without yet fitting the model data_and_formula <- update_formula_and_data(   data = vitamind2,   formula = Y ~ X + amp_acro(time,     group = \"X\",     period = 12   ) )  # print formula from above data_and_formula$newformula #> Y ~ X + X:main_rrr1 + X:main_sss1 #> <environment: 0x55ff36d0acd8>  # fit model while adding random effect to cosinor model formula. mod <- fit_model_and_process(   obj = data_and_formula,   formula = update.formula(     data_and_formula$newformula, . ~ . + (1 | patient)   ) )  mod #>  #>  Conditional Model  #>  #>  Raw formula:  #> Y ~ X + (1 | patient) + X:main_rrr1 + X:main_sss1  #>  #>  Raw Coefficients:  #>              Estimate #> (Intercept)  29.68979 #> X1            1.90186 #> X0:main_rrr1  0.93079 #> X1:main_rrr1  6.51029 #> X0:main_sss1  6.20099 #> X1:main_sss1  4.81846 #>  #>  Transformed Coefficients:  #>             Estimate #> (Intercept) 29.68979 #> [X=1]        1.90186 #> [X=0]:amp    6.27046 #> [X=1]:amp    8.09947 #> [X=0]:acr    1.42181 #> [X=1]:acr    0.63715 mod$fit # printing the `glmmTMB` model within shows Std.Dev. of random effect #> Formula:          Y ~ X + (1 | patient) + X:main_rrr1 + X:main_sss1 #> Data: newdata #>       AIC       BIC    logLik  df.resid  #> 1248.0316 1274.4181 -616.0158       192  #> Random-effects (co)variances: #>  #> Conditional model: #>  Groups   Name        Std.Dev. #>  patient  (Intercept) 0.0002   #>  Residual             5.2653   #>  #> Number of obs: 200 / Conditional model: patient, 5 #>  #> Dispersion estimate for gaussian family (sigma^2): 27.7  #>  #> Fixed Effects: #>  #> Conditional model: #>  (Intercept)            X1  X0:main_rrr1  X1:main_rrr1  X0:main_sss1   #>      29.6898        1.9019        0.9308        6.5103        6.2010   #> X1:main_sss1   #>       4.8185"},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/polar_plot.cosinor.glmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates a polar plot with elliptical confidence intervals — polar_plot.cosinor.glmm","title":"Generates a polar plot with elliptical confidence intervals — polar_plot.cosinor.glmm","text":"Generates polar plot elliptical confidence intervals","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/polar_plot.cosinor.glmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates a polar plot with elliptical confidence intervals — polar_plot.cosinor.glmm","text":"","code":"# S3 method for cosinor.glmm polar_plot(   x,   ci_level = 0.95,   n_breaks = 5,   component_index,   grid_angle_segments = 8,   radial_units = c(\"radians\", \"degrees\", \"period\"),   clockwise = FALSE,   text_size = 3.5,   text_opacity = 1,   fill_colours,   ellipse_opacity = 0.3,   circle_linetype = \"dotted\",   start = c(\"right\", \"left\", \"top\", \"bottom\"),   view = c(\"full\", \"zoom\", \"zoom_origin\"),   overlay_parameter_info = FALSE,   quietly = TRUE,   ... )"},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/polar_plot.cosinor.glmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates a polar plot with elliptical confidence intervals — polar_plot.cosinor.glmm","text":"x object class cosinor.glmm ci_level level calculated confidence ellipses. Defaults 0.95. n_breaks number concentric circles plotted using scales::breaks_pretty() function. default, 5 breaks used. number breaks may adjusted result even interval. example, n_breaks 3, maximum plot radius 8, instead plotting circles intervals 1.6, interval rounded 2 result sequence: 0, 2, 4, 6, 8. See ?scales::breaks_pretty details. component_index number corresponds particular component cosinor.glmm() object used create polar plot. missing (default), plots components arranged returned plot. single multiple values provided, components returned. (example component_index = 1, component_index = c(1, 3)). grid_angle_segments integer. Determines total number segments background polar plot. example, value 4 create quadrants around origin. Defaults 8. radial_units character specifying angular units plot. Possible values one c('radians', 'degrees', 'period'). units relate period component visualised. 'radians': \\([0, 2\\pi]\\)  'degrees': \\([0, 360]\\)  'period': \\([0, period]\\)  clockwise logical. TRUE, angles increase clockwise fashion. FALSE, anti-clockwise. Defaults FALSE. text_size number controlling font size text labels. Defaults 3. text_opacity numeric 0 1 inclusive controls opacity text labels. fill_colours character vector containing colours mapped levels within group. model components different number levels per factor, length input match greatest number levels. , number levels exceeds length default argument (8), colours generated using rainbow(). ellipse_opacity numeric 0 1 inclusive controls opacity confidence ellipses. Defaults 0.3. circle_linetype character determines linetype radial circles background polar plot. See ?linetype details. start character, within c(\"right\", \"left\", \"top\", \"bottom\") determines angle 0 located. start = \"top\", clockwise = TRUE, angle rotate clockwise, starting '12 o-clock' position clock. view character, within c(\"full\", \"zoom\", \"zoom_origin\") controls view plots. 'full': maintains full view polar plot, including background radial circles.  'zoom': finds minimum view window contains confidence ellipses.  'zoom_origin': zooms confidence ellipses (like \"zoom\"), also keeps origin within frame.  overlay_parameter_info logical argument. TRUE, information acrophase amplitude displayed polar plots. quietly Analogous verbose, logical argument controls whether messages displayed console. ... Additional, ignored arguments.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/polar_plot.cosinor.glmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates a polar plot with elliptical confidence intervals — polar_plot.cosinor.glmm","text":"Returns ggplot object.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/polar_plot.cosinor.glmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generates a polar plot with elliptical confidence intervals — polar_plot.cosinor.glmm","text":"","code":"model <- cosinor.glmm(   Y ~ X + amp_acro(time, group = \"X\", period = 12),   data = vitamind ) polar_plot(model)"},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/polar_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates a polar plot with elliptical confidence intervals — polar_plot","title":"Generates a polar plot with elliptical confidence intervals — polar_plot","text":"Generates polar plot elliptical confidence intervals","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/polar_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates a polar plot with elliptical confidence intervals — polar_plot","text":"","code":"polar_plot(   x,   ci_level = 0.95,   n_breaks = 5,   component_index,   grid_angle_segments = 8,   radial_units = c(\"radians\", \"degrees\", \"period\"),   clockwise = FALSE,   text_size = 3,   text_opacity = 0.5,   fill_colours,   ellipse_opacity = 0.3,   circle_linetype = \"dotted\",   start = c(\"right\", \"left\", \"top\", \"bottom\"),   view = c(\"full\", \"zoom\", \"zoom_origin\"),   overlay_parameter_info = FALSE,   quietly = TRUE,   ... )"},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/polar_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates a polar plot with elliptical confidence intervals — polar_plot","text":"x object class cosinor.glmm ci_level level calculated confidence ellipses. Defaults 0.95. n_breaks number concentric circles plotted using scales::breaks_pretty() function. default, 5 breaks used. number breaks may adjusted result even interval. example, n_breaks 3, maximum plot radius 8, instead plotting circles intervals 1.6, interval rounded 2 result sequence: 0, 2, 4, 6, 8. See ?scales::breaks_pretty details. component_index number corresponds particular component cosinor.glmm() object used create polar plot. missing (default), plots components arranged returned plot. single multiple values provided, components returned. (example component_index = 1, component_index = c(1, 3)). grid_angle_segments integer. Determines total number segments background polar plot. example, value 4 create quadrants around origin. Defaults 8. radial_units character specifying angular units plot. Possible values one c('radians', 'degrees', 'period'). units relate period component visualised. 'radians': \\([0, 2\\pi]\\)  'degrees': \\([0, 360]\\)  'period': \\([0, period]\\)  clockwise logical. TRUE, angles increase clockwise fashion. FALSE, anti-clockwise. Defaults FALSE. text_size number controlling font size text labels. Defaults 3. text_opacity numeric 0 1 inclusive controls opacity text labels. fill_colours character vector containing colours mapped levels within group. model components different number levels per factor, length input match greatest number levels. , number levels exceeds length default argument (8), colours generated using rainbow(). ellipse_opacity numeric 0 1 inclusive controls opacity confidence ellipses. Defaults 0.3. circle_linetype character determines linetype radial circles background polar plot. See ?linetype details. start character, within c(\"right\", \"left\", \"top\", \"bottom\") determines angle 0 located. start = \"top\", clockwise = TRUE, angle rotate clockwise, starting '12 o-clock' position clock. view character, within c(\"full\", \"zoom\", \"zoom_origin\") controls view plots. 'full': maintains full view polar plot, including background radial circles.  'zoom': finds minimum view window contains confidence ellipses.  'zoom_origin': zooms confidence ellipses (like \"zoom\"), also keeps origin within frame.  overlay_parameter_info logical argument. TRUE, information acrophase amplitude displayed polar plots. quietly Analogous verbose, logical argument controls whether messages displayed console. ... Additional, ignored arguments.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/polar_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates a polar plot with elliptical confidence intervals — polar_plot","text":"Returns ggplot object.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/polar_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generates a polar plot with elliptical confidence intervals — polar_plot","text":"","code":"model <- cosinor.glmm(   Y ~ X + amp_acro(time, group = \"X\", period = 12),   data = vitamind ) polar_plot(model)"},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/predict.cosinor.glmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict from a cosinor model — predict.cosinor.glmm","title":"Predict from a cosinor model — predict.cosinor.glmm","text":"Given time variable optional covariates, generate predicted values cosinor fit. Default prediction mean value, optionally can predict given month","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/predict.cosinor.glmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict from a cosinor model — predict.cosinor.glmm","text":"","code":"# S3 method for cosinor.glmm predict(object, newdata, ...)"},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/predict.cosinor.glmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict from a cosinor model — predict.cosinor.glmm","text":"object object class cosinor.glmm. newdata Optional new data. ... arguments passed glmmTMB:::predict.glmmTMB.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/predict.cosinor.glmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict from a cosinor model — predict.cosinor.glmm","text":"Returns predicted values cosinor model.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/predict.cosinor.glmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict from a cosinor model — predict.cosinor.glmm","text":"","code":"fit <- cosinor.glmm(Y ~ X + amp_acro(time,   group = \"X\",   n_components = 1,   period = 12 ), data = vitamind) predict(fit) #>   [1] 28.78703 29.38899 39.65854 32.15901 33.23152 31.59433 23.83651 25.61113 #>   [9] 35.22545 30.23427 36.66338 35.07011 26.82298 35.51448 24.51868 31.44631 #>  [17] 30.00428 32.91062 28.62956 23.75660 35.10536 30.11651 33.63770 34.51069 #>  [25] 25.02505 25.25647 31.02807 23.60527 24.18237 39.37435 25.82357 39.59839 #>  [33] 28.24383 31.14540 35.25047 35.38660 23.42314 24.75488 32.49686 23.44897 #>  [41] 39.11973 23.74275 31.59794 23.83684 25.52791 24.60214 27.60858 28.42553 #>  [49] 35.83474 33.66548 36.72509 27.97113 33.23490 24.11053 24.85594 35.93978 #>  [57] 27.03989 24.93988 35.80208 30.54907 35.57846 27.91994 35.08763 23.59721 #>  [65] 28.99434 27.91936 34.94810 24.87614 35.64055 24.63725 27.62906 32.39134 #>  [73] 30.53587 26.22991 24.15941 29.70517 23.46939 29.52666 38.02665 38.71979 #>  [81] 23.62914 26.19744 35.92551 39.52855 31.46970 31.26501 23.80388 33.81262 #>  [89] 29.29779 24.16631 34.81420 35.51270 23.64597 28.25380 27.66860 28.18308 #>  [97] 23.49232 23.52321 27.05249 24.01758 32.66548 34.64840 23.96458 25.41950 #> [105] 32.41430 30.85780 34.78939 35.56505 33.49875 26.00210 27.13927 27.05351 #> [113] 24.50105 31.40587 24.19340 33.02303 28.51051 35.75483 26.79572 25.19659 #> [121] 25.26220 25.78390 28.30831 32.67383 39.09038 36.50282 28.24510 31.81259 #> [129] 35.83742 35.62749 25.21056 23.77412 33.73027 31.82716 29.17193 33.93879 #> [137] 35.28723 24.98276 32.45258 37.68323 28.36229 34.60108 31.45233 30.26221 #> [145] 35.96024 34.00755 27.33207 23.62559 23.82340 39.55556 36.93157 24.42923 #> [153] 33.54381 35.54254 24.52004 31.84621 26.92623 35.15592 31.66329 35.89971 #> [161] 28.54019 39.65296 23.96760 39.34180 38.38550 29.95681 24.85415 24.70597 #> [169] 38.73700 27.30479 27.17846 23.66411 37.66169 26.28373 39.57867 23.60737 #> [177] 25.78763 35.86054 24.56264 32.71904 27.19674 32.93022 23.63372 23.62670 #> [185] 34.29370 33.67406 34.70216 23.64030 32.34731 24.28945 31.90187 26.48566 #> [193] 24.47011 26.37521 26.95760 30.17249 24.55746 35.49054 28.32652 28.48194"},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/print.cosinor.glmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a brief summary of the cosinor.glmm model. — print.cosinor.glmm","title":"Print a brief summary of the cosinor.glmm model. — print.cosinor.glmm","text":"Print brief summary cosinor.glmm model.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/print.cosinor.glmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a brief summary of the cosinor.glmm model. — print.cosinor.glmm","text":"","code":"# S3 method for cosinor.glmm print(x, digits = getOption(\"digits\"), ...)"},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/print.cosinor.glmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a brief summary of the cosinor.glmm model. — print.cosinor.glmm","text":"x cosinor.glmm object. digits Controls number digits displayed summary output. ... Additional, ignored arguments.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/print.cosinor.glmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a brief summary of the cosinor.glmm model. — print.cosinor.glmm","text":"print(x) returns x invisibly.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/print.cosinor.glmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a brief summary of the cosinor.glmm model. — print.cosinor.glmm","text":"","code":"# Single component cosinor model cosinor.glmm(   Y ~ amp_acro(time_col = time, group = \"X\", period = 12),   data = vitamind ) #>  #>  Conditional Model  #>  #>  Raw formula:  #> Y ~ X:main_rrr1 + X:main_sss1  #>  #>  Raw Coefficients:  #>              Estimate #> (Intercept)  30.32687 #> X0:main_rrr1  0.86520 #> X1:main_rrr1  6.47625 #> X0:main_sss1  6.24438 #> X1:main_sss1  4.66701 #>  #>  Transformed Coefficients:  #>             Estimate #> (Intercept) 30.32687 #> [X=0]:amp    6.30404 #> [X=1]:amp    7.98266 #> [X=0]:acr    1.43312 #> [X=1]:acr    0.62444"},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/print.sub_test_cosinor.html","id":null,"dir":"Reference","previous_headings":"","what":"Print test of model — print.sub_test_cosinor","title":"Print test of model — print.sub_test_cosinor","text":"Print test model","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/print.sub_test_cosinor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print test of model — print.sub_test_cosinor","text":"","code":"# S3 method for sub_test_cosinor print(x, ...)"},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/print.sub_test_cosinor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print test of model — print.sub_test_cosinor","text":"x sub_test_cosinor object. ... Additional, ignored arguments.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/print.sub_test_cosinor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print test of model — print.sub_test_cosinor","text":"print(x) returns x invisibly.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/print.sub_test_cosinor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print test of model — print.sub_test_cosinor","text":"","code":"data_2_component <- simulate_cosinor(   n = 10000,   mesor = 5,   amp = c(2, 5),   acro = c(0, pi),   beta.mesor = 4,   beta.amp = c(3, 4),   beta.acro = c(0, pi / 2),   family = \"gaussian\",   n_components = 2,   period = c(10, 12),   beta.group = TRUE ) mod_2_component <- cosinor.glmm(   Y ~ group + amp_acro(times,     n_components = 2, group = \"group\",     period = c(10, 12)   ),   data = data_2_component ) test_output <- test_cosinor_levels(   mod_2_component,   param = \"amp\",    x_str = \"group\" ) print(test_output$global.test) #> Statistic:  #> 201.43 #>  #> P-value:  #> 0"},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/print.summary.cosinor.glmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the summary of a cosinor model — print.summary.cosinor.glmm","title":"Print the summary of a cosinor model — print.summary.cosinor.glmm","text":"Print summary cosinor model","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/print.summary.cosinor.glmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the summary of a cosinor model — print.summary.cosinor.glmm","text":"","code":"# S3 method for summary.cosinor.glmm print(x, digits = getOption(\"digits\"), ...)"},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/print.summary.cosinor.glmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the summary of a cosinor model — print.summary.cosinor.glmm","text":"x object class summary.cosinor.glmm digits Controls number digits displayed summary output ... Currently unused","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/print.summary.cosinor.glmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print the summary of a cosinor model — print.summary.cosinor.glmm","text":"print returns x invisibly.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/print.summary.cosinor.glmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print the summary of a cosinor model — print.summary.cosinor.glmm","text":"","code":"fit <- cosinor.glmm(Y ~ X + amp_acro(time,   group = \"X\",   n_components = 1,   period = 12 ), data = vitamind) summary(fit) #>  #>  Conditional Model  #> Raw model coefficients: #>                estimate standard.error   lower.CI upper.CI    p.value     #> (Intercept)  29.6897959      0.4583696 28.7914079 30.58818 < 2.22e-16 *** #> X1            1.9018623      0.7919688  0.3496320  3.45409   0.016331 *   #> X0:main_rrr1  0.9307876      0.6260656 -0.2962784  2.15785   0.137087     #> X1:main_rrr1  6.5102900      0.9303406  4.6868560  8.33372 2.6011e-12 *** #> X0:main_sss1  6.2009896      0.6701952  4.8874311  7.51455 < 2.22e-16 *** #> X1:main_sss1  4.8184618      0.8963299  3.0616875  6.57524 7.6257e-08 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Transformed coefficients: #>               estimate standard.error   lower.CI upper.CI    p.value     #> (Intercept) 29.6897959      0.4583696 28.7914079 30.58818 < 2.22e-16 *** #> [X=1]        1.9018623      0.7919688  0.3496320  3.45409   0.016331 *   #> [X=0]:amp1   6.2704576      0.6696564  4.9579551  7.58296 < 2.22e-16 *** #> [X=1]:amp1   8.0994722      1.1028357  5.9379540 10.26099 2.0696e-13 *** #> [X=0]:acr1   1.4218056      0.1000725  1.2256670  1.61794 < 2.22e-16 *** #> [X=1]:acr1   0.6371544      0.1360809  0.3704408  0.90387 2.8385e-06 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1"},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/print.test_cosinor.html","id":null,"dir":"Reference","previous_headings":"","what":"Print results of test of cosinor model — print.test_cosinor","title":"Print results of test of cosinor model — print.test_cosinor","text":"Print results test cosinor model","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/print.test_cosinor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print results of test of cosinor model — print.test_cosinor","text":"","code":"# S3 method for test_cosinor print(x, ...)"},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/print.test_cosinor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print results of test of cosinor model — print.test_cosinor","text":"x test_cosinor object. ... Arguments passed print","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/print.test_cosinor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print results of test of cosinor model — print.test_cosinor","text":"print(x) returns x invisibly.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/print.test_cosinor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print results of test of cosinor model — print.test_cosinor","text":"","code":"data_2_component <- simulate_cosinor(   n = 10000,   mesor = 5,   amp = c(2, 5),   acro = c(0, pi),   beta.mesor = 4,   beta.amp = c(3, 4),   beta.acro = c(0, pi / 2),   family = \"gaussian\",   n_components = 2,   period = c(10, 12),   beta.group = TRUE ) mod_2_component <- cosinor.glmm(   Y ~ group + amp_acro(times,                        n_components = 2, group = \"group\",                        period = c(10, 12)   ),   data = data_2_component ) test_cosinor_levels(   mod_2_component,   param = \"amp\",   x_str = \"group\" ) #> Test Details:  #> Parameter being tested: #> Amplitude #>  #> Comparison type: #> levels #>  #> Grouping variable used for comparison between groups: group #> Reference group: 0 #> Comparator group: 1 #>  #> cosinor.glmm model has2 components. Component 1 is being used for comparison between groups. #>  #>  #>  #> Global test:  #> Statistic:  #> 229.89 #>  #> P-value:  #> 0 #>  #>  #> Individual tests: #> Statistic:  #> 15.16 #>  #> P-value:  #> 0 #>  #> Estimate and 95% confidence interval: #> 0.95 (0.82 to 1.07)"},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. ggplot2 autoplot","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/simulate_cosinor.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate data from a cosinor model — simulate_cosinor","title":"Simulate data from a cosinor model — simulate_cosinor","text":"function simulates data cosinor model single covariate, time scale month, optionally allows single covariate effects mean, amplitude, acrophase.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/simulate_cosinor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate data from a cosinor model — simulate_cosinor","text":"","code":"simulate_cosinor(   n,   mesor,   amp,   acro,   period = 24,   n_components,   beta.group = FALSE,   beta.mesor,   beta.amp,   beta.acro,   n_period = 1,   family = c(\"gaussian\", \"poisson\", \"binomial\", \"gamma\"),   ... )"},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/simulate_cosinor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate data from a cosinor model — simulate_cosinor","text":"n sample size. integer greater 0. mesor numeric. MESOR (midline estimating statistic rhythm) group = 0. mesor independent cosinor components, one value allowed even multiple components data simulated. amp numeric. amplitude value (group = 0 grouped data simulated (beta.group = TRUE)). simulating data multiple components, specify vector values component. E.g: amp = c(5, 10). acro numeric. acrophase value radians (group = 0 grouped data simulated (beta.group = TRUE)). simulating data multiple components, specify vector values component. E.g: acr = c(0, pi) two components. period period rhythm data (group = 0 grouped data simulated (beta.group = TRUE)). simulating data multiple components, specify vector values component. E.g: period = c(12, 6) two components. n_components number components model. must match length inputs amp acro. beta.group logical. TRUE second group data simulated included returned data set. FALSE, beta.acro, beta.mesor, beta.amp arguments ignored. beta.mesor numeric. MESOR value term group = 1 beta.amp numeric. amplitude value group = 1. simulating data multiple components, specify vector values component. E.g: amp = c(2, 8). beta.acro numeric. acrophase value radians (group = 1. simulating data multiple components, specify vector values component. E.g: acr = c(2, 5) two components. n_period numeric. number cycles rhythm simulated. family character. family (see ?family) simulated dataset. Can handle values c(\"poisson\", \"binomial\", \"gamma\", \"gaussian\"). ... Extra arguments, including alpha controls shape argument sampling gamma distribution (family = \"gamma\"; default 1), sd (standard deviation) used sampling normal distribution (family = \"gaussian\"; default 1). specify parameters beta (treatment) group, use beta.alpha beta.sd","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/simulate_cosinor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate data from a cosinor model — simulate_cosinor","text":"Returns simulated data data.frame.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/simulate_cosinor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate data from a cosinor model — simulate_cosinor","text":"","code":"simulate_cosinor(   n = 100,   mesor = 1,   amp = 1,   acro = 1,   period = 24,   family = \"gaussian\" ) #>               Y      times group #> 1    1.32681462  9.2804071     0 #> 2    2.27031022  1.1985154     0 #> 3    1.44650182 18.2006291     0 #> 4    0.85840617  0.5934994     0 #> 5    1.31937570  6.6635338     0 #> 6    0.45775171 14.6229340     0 #> 7    0.32261559 10.8414858     0 #> 8   -1.51344173 15.3775729     0 #> 9   -0.10428827 13.8921018     0 #> 10   1.25218410 22.2623332     0 #> 11  -0.83575586 11.4779494     0 #> 12  -0.44722497 20.5934804     0 #> 13  -0.28442150 23.9721511     0 #> 14   0.41163700 12.0534407     0 #> 15  -0.46773178 14.0769733     0 #> 16   3.57512618  2.8561555     0 #> 17   1.14624574 19.1229108     0 #> 18   0.25561266  8.9255936     0 #> 19   1.25347691 18.1690123     0 #> 20   0.72478295  0.5756451     0 #> 21  -0.20301596 14.2568219     0 #> 22   0.61164852 15.4539844     0 #> 23   0.47721430 21.8368626     0 #> 24   1.78599710  9.6971686     0 #> 25   0.08373114  7.5778712     0 #> 26   3.36528562  2.6513893     0 #> 27  -1.60880337 15.9292739     0 #> 28   0.94739652 10.0440563     0 #> 29   0.84273920 20.0592827     0 #> 30   0.31263715 12.7029034     0 #> 31  -0.27063766 15.8787186     0 #> 32   0.05787712 10.7786120     0 #> 33   0.81188085 12.0884063     0 #> 34  -0.28843590 10.8352672     0 #> 35   1.05108506  5.2606939     0 #> 36  -1.15988556 17.5362220     0 #> 37   0.55259312  0.9580655     0 #> 38   1.24827531  1.6905079     0 #> 39   1.46001943  4.8195056     0 #> 40   1.69878573 21.0167876     0 #> 41   0.46713875 16.4137397     0 #> 42  -0.98419231 17.0338215     0 #> 43   1.05121295  9.3810462     0 #> 44   0.15860935 15.7103502     0 #> 45   1.65065922  2.6443829     0 #> 46   1.57135408  6.9409618     0 #> 47   0.12720792  3.6065270     0 #> 48   2.03605905  5.7469259     0 #> 49   0.02378326 17.9633265     0 #> 50   0.37958444 23.7441116     0 #> 51   2.30261186  8.8582494     0 #> 52   1.49997294  1.1193424     0 #> 53  -1.37069196 17.8448173     0 #> 54  -0.69410247 13.0514428     0 #> 55   2.31141821  4.2063053     0 #> 56   0.04823585 15.6056139     0 #> 57   1.99014222  3.8415229     0 #> 58   0.92086714  2.2310352     0 #> 59  -1.51835547 14.7462260     0 #> 60  -1.29441881 15.8551883     0 #> 61   0.65559367 16.7669859     0 #> 62   1.75443849  7.7350907     0 #> 63   0.79866811 11.9473897     0 #> 64   2.95699063 20.3091367     0 #> 65   3.00298588  7.0421347     0 #> 66   0.37903088 10.7210098     0 #> 67  -0.28925928 23.8300981     0 #> 68   0.89497415 18.6620137     0 #> 69   0.90079777  6.6434084     0 #> 70   1.40281838  3.1700955     0 #> 71   2.12879186  8.0976426     0 #> 72   1.96709742  4.4056868     0 #> 73   0.57752983  0.3757766     0 #> 74   1.63060478  7.6687239     0 #> 75   1.42170747  3.9382496     0 #> 76   1.00582122  6.1085287     0 #> 77  -0.05124817  1.1809688     0 #> 78   3.27069372  2.2167454     0 #> 79   1.70732213  4.5095385     0 #> 80   2.12686443  5.7897092     0 #> 81   0.74653969  1.7513846     0 #> 82  -0.19877147 21.4220352     0 #> 83   0.40827451 13.9812664     0 #> 84  -0.65925855 13.3332744     0 #> 85   1.99028641  6.0961487     0 #> 86  -0.13198403 18.0996662     0 #> 87  -0.38703895 16.2811649     0 #> 88   3.06372054  5.2270063     0 #> 89   2.22893642  3.9564215     0 #> 90   2.70201103  2.3275670     0 #> 91   1.49314515 10.3171987     0 #> 92   0.97391695  4.5928646     0 #> 93   3.07330273  4.2422016     0 #> 94   0.73417579 20.7078575     0 #> 95   1.80807435  2.0152717     0 #> 96   2.56613571 13.3397077     0 #> 97   1.71951959  4.8977659     0 #> 98   1.54893969  7.1942803     0 #> 99   0.13322233 18.2031105     0 #> 100 -0.18477140 17.8664463     0"},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/summary.cosinor.glmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize a cosinor model\nGiven a time variable and optional covariates, generate inference a cosinor\nfit. Gives estimates, confidence intervals, and tests for the raw parameters,\nand for the mean, amplitude, and acrophase parameters. If the model includes\ncovariates, the function returns the estimates of the mean, amplitude, and\nacrophase for the group with covariates equal to 1 and equal to 0. This may\nnot be the desired result for continuous covariates. — summary.cosinor.glmm","title":"Summarize a cosinor model\nGiven a time variable and optional covariates, generate inference a cosinor\nfit. Gives estimates, confidence intervals, and tests for the raw parameters,\nand for the mean, amplitude, and acrophase parameters. If the model includes\ncovariates, the function returns the estimates of the mean, amplitude, and\nacrophase for the group with covariates equal to 1 and equal to 0. This may\nnot be the desired result for continuous covariates. — summary.cosinor.glmm","text":"Summarize cosinor model Given time variable optional covariates, generate inference cosinor fit. Gives estimates, confidence intervals, tests raw parameters, mean, amplitude, acrophase parameters. model includes covariates, function returns estimates mean, amplitude, acrophase group covariates equal 1 equal 0. may desired result continuous covariates.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/summary.cosinor.glmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize a cosinor model\nGiven a time variable and optional covariates, generate inference a cosinor\nfit. Gives estimates, confidence intervals, and tests for the raw parameters,\nand for the mean, amplitude, and acrophase parameters. If the model includes\ncovariates, the function returns the estimates of the mean, amplitude, and\nacrophase for the group with covariates equal to 1 and equal to 0. This may\nnot be the desired result for continuous covariates. — summary.cosinor.glmm","text":"","code":"# S3 method for cosinor.glmm summary(object, ci_level = 0.95, ...)"},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/summary.cosinor.glmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize a cosinor model\nGiven a time variable and optional covariates, generate inference a cosinor\nfit. Gives estimates, confidence intervals, and tests for the raw parameters,\nand for the mean, amplitude, and acrophase parameters. If the model includes\ncovariates, the function returns the estimates of the mean, amplitude, and\nacrophase for the group with covariates equal to 1 and equal to 0. This may\nnot be the desired result for continuous covariates. — summary.cosinor.glmm","text":"object object class cosinor.glmm ci_level level calculated confidence intervals. Defaults 0.95. ... Currently unused","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/summary.cosinor.glmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize a cosinor model\nGiven a time variable and optional covariates, generate inference a cosinor\nfit. Gives estimates, confidence intervals, and tests for the raw parameters,\nand for the mean, amplitude, and acrophase parameters. If the model includes\ncovariates, the function returns the estimates of the mean, amplitude, and\nacrophase for the group with covariates equal to 1 and equal to 0. This may\nnot be the desired result for continuous covariates. — summary.cosinor.glmm","text":"Returns summary cosinor.glmm model summary.cosinor.glmm object.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/summary.cosinor.glmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize a cosinor model\nGiven a time variable and optional covariates, generate inference a cosinor\nfit. Gives estimates, confidence intervals, and tests for the raw parameters,\nand for the mean, amplitude, and acrophase parameters. If the model includes\ncovariates, the function returns the estimates of the mean, amplitude, and\nacrophase for the group with covariates equal to 1 and equal to 0. This may\nnot be the desired result for continuous covariates. — summary.cosinor.glmm","text":"","code":"fit <- cosinor.glmm(Y ~ X + amp_acro(time,   group = \"X\",   n_components = 1,   period = 12 ), data = vitamind) summary(fit) #>  #>  Conditional Model  #> Raw model coefficients: #>                estimate standard.error   lower.CI upper.CI    p.value     #> (Intercept)  29.6897959      0.4583696 28.7914079 30.58818 < 2.22e-16 *** #> X1            1.9018623      0.7919688  0.3496320  3.45409   0.016331 *   #> X0:main_rrr1  0.9307876      0.6260656 -0.2962784  2.15785   0.137087     #> X1:main_rrr1  6.5102900      0.9303406  4.6868560  8.33372 2.6011e-12 *** #> X0:main_sss1  6.2009896      0.6701952  4.8874311  7.51455 < 2.22e-16 *** #> X1:main_sss1  4.8184618      0.8963299  3.0616875  6.57524 7.6257e-08 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Transformed coefficients: #>               estimate standard.error   lower.CI upper.CI    p.value     #> (Intercept) 29.6897959      0.4583696 28.7914079 30.58818 < 2.22e-16 *** #> [X=1]        1.9018623      0.7919688  0.3496320  3.45409   0.016331 *   #> [X=0]:amp1   6.2704576      0.6696564  4.9579551  7.58296 < 2.22e-16 *** #> [X=1]:amp1   8.0994722      1.1028357  5.9379540 10.26099 2.0696e-13 *** #> [X=0]:acr1   1.4218056      0.1000725  1.2256670  1.61794 < 2.22e-16 *** #> [X=1]:acr1   0.6371544      0.1360809  0.3704408  0.90387 2.8385e-06 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1"},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/test_cosinor_components.html","id":null,"dir":"Reference","previous_headings":"","what":"Test for differences in a cosinor model between components. — test_cosinor_components","title":"Test for differences in a cosinor model between components. — test_cosinor_components","text":"Given time variable optional covariates, generate inference cosinor fit. covariate named (vector covariates), function performs Wald test comparing group covariates equal 1 group covariates equal 0. may desired result continuous covariates.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/test_cosinor_components.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test for differences in a cosinor model between components. — test_cosinor_components","text":"","code":"test_cosinor_components(   x,   x_str,   param = \"amp\",   comparison_A = 1,   comparison_B = 2,   level_index = 0,   ci_level = 0.95 )"},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/test_cosinor_components.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test for differences in a cosinor model between components. — test_cosinor_components","text":"x cosinor.glmm object. x_str character. name grouping variable within differences selected cosinor characteristic (amplitude acrophase) tested. param character. Either \"amp\" \"acr\" testing differences amplitude acrophase, respectively. comparison_A integer. Refers component number act reference group. comparison. comparison_B integer. Refers component number act comparator group level_index integer. comparison_type = \"components\", level_index indicates level grouping variable used comparison components. ci_level level calculated confidence intervals. Defaults 0.95.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/test_cosinor_components.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test for differences in a cosinor model between components. — test_cosinor_components","text":"Returns test_cosinor object.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/test_cosinor_components.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test for differences in a cosinor model between components. — test_cosinor_components","text":"","code":"data_2_component <- simulate_cosinor(   n = 10000,   mesor = 5,   amp = c(2, 5),   acro = c(0, pi),   beta.mesor = 4,   beta.amp = c(3, 4),   beta.acro = c(0, pi / 2),   family = \"gaussian\",   n_components = 2,   period = c(10, 12),   beta.group = TRUE ) mod_2_component <- cosinor.glmm(   Y ~ group + amp_acro(times,     n_components = 2, group = \"group\",     period = c(10, 12)   ),   data = data_2_component ) test_cosinor_components(mod_2_component, param = \"amp\", x_str = \"group\") #> Test Details:  #> Parameter being tested: #> Amplitude #>  #> Comparison type: #> components #>  #> Component indices used for comparison between groups: group #> Reference component: 1 #> Comparator component: 2 #>  #>  #> Global test:  #> Statistic:  #> 2271.73 #>  #> P-value:  #> 0 #>  #>  #> Individual tests: #> Statistic:  #> 47.66 #>  #> P-value:  #> 0 #>  #> Estimate and 95% confidence interval: #> 2.96 (2.84 to 3.09)"},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/test_cosinor_levels.html","id":null,"dir":"Reference","previous_headings":"","what":"Test for differences in a cosinor model between levels of the grouping\nvariable. — test_cosinor_levels","title":"Test for differences in a cosinor model between levels of the grouping\nvariable. — test_cosinor_levels","text":"Given time variable optional covariates, generate inference cosinor fit. covariate named (vector covariates), function performs Wald test comparing group covariates equal 1 group covariates equal 0. may desired result continuous covariates.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/test_cosinor_levels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test for differences in a cosinor model between levels of the grouping\nvariable. — test_cosinor_levels","text":"","code":"test_cosinor_levels(   x,   x_str,   param = \"amp\",   comparison_A,   comparison_B,   component_index = 1,   ci_level = 0.95 )"},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/test_cosinor_levels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test for differences in a cosinor model between levels of the grouping\nvariable. — test_cosinor_levels","text":"x cosinor.glmm object. x_str character. name grouping variable within differences selected cosinor characteristic (amplitude acrophase) tested. param character. Either \"amp\" \"acr\" testing differences amplitude acrophase, respectively. comparison_A integer, string. Refers first level within grouping variable x_str act reference group comparison. Ensure corresponds name level original dataset. comparison_B integer, string. Refers second level within grouping variable x_str act comparator group comparison. Ensure corresponds name level original dataset. component_index integer. comparison_type = \"levels\", component_index indicates component compared levels grouping variable. ci_level level calculated confidence intervals. Defaults 0.95.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/test_cosinor_levels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test for differences in a cosinor model between levels of the grouping\nvariable. — test_cosinor_levels","text":"Returns test_cosinor object.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/test_cosinor_levels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test for differences in a cosinor model between levels of the grouping\nvariable. — test_cosinor_levels","text":"","code":"data_2_component <- simulate_cosinor(   n = 10000,   mesor = 5,   amp = c(2, 5),   acro = c(0, pi),   beta.mesor = 4,   beta.amp = c(3, 4),   beta.acro = c(0, pi / 2),   family = \"gaussian\",   n_components = 2,   period = c(10, 12),   beta.group = TRUE ) mod_2_component <- cosinor.glmm(   Y ~ group + amp_acro(times,     n_components = 2, group = \"group\",     period = c(10, 12)   ),   data = data_2_component ) test_cosinor_levels(mod_2_component, param = \"amp\", x_str = \"group\") #> Test Details:  #> Parameter being tested: #> Amplitude #>  #> Comparison type: #> levels #>  #> Grouping variable used for comparison between groups: group #> Reference group: 0 #> Comparator group: 1 #>  #> cosinor.glmm model has2 components. Component 1 is being used for comparison between groups. #>  #>  #>  #> Global test:  #> Statistic:  #> 309.29 #>  #> P-value:  #> 0 #>  #>  #> Individual tests: #> Statistic:  #> 17.59 #>  #> P-value:  #> 0 #>  #> Estimate and 95% confidence interval: #> 1.12 (1 to 1.24)"},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/update_formula_and_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Update data and formula for fitting cosinor.glmm model — update_formula_and_data","title":"Update data and formula for fitting cosinor.glmm model — update_formula_and_data","text":"Update data formula fitting cosinor.glmm model","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/update_formula_and_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update data and formula for fitting cosinor.glmm model — update_formula_and_data","text":"","code":"update_formula_and_data(   data,   formula,   family = \"gaussian\",   quietly = TRUE,   dispformula = ~1,   ziformula = ~0 )"},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/update_formula_and_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update data and formula for fitting cosinor.glmm model — update_formula_and_data","text":"data input data fitting cosinor.glmm model. formula model formula, specified user including amp_acro(). family model family. quietly controls whether messages amp_acro displayed. TRUE default dispformula formula specifying dispersion model ziformula formula specifying zero-inflation model","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/update_formula_and_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update data and formula for fitting cosinor.glmm model — update_formula_and_data","text":"Returns list.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/update_formula_and_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update data and formula for fitting cosinor.glmm model — update_formula_and_data","text":"","code":"# Use vitamind data but add a \"patient\" identifier used as a random effect vitamind2 <- vitamind vitamind2$patient <- sample(   LETTERS[1:5],   size = nrow(vitamind2), replace = TRUE )  # Use update_formula_and_data() to perform wrangling steps of cosinor.glmm() # without yet fitting the model data_and_formula <- update_formula_and_data(   data = vitamind2,   formula = Y ~ X + amp_acro(time,     group = \"X\",     period = 12   ) )  # print formula from above data_and_formula$newformula #> Y ~ X + X:main_rrr1 + X:main_sss1 #> <environment: 0x55ff37841c68>  # fit model while adding random effect to cosinor model formula. mod <- fit_model_and_process(   obj = data_and_formula,   formula = update.formula(     data_and_formula$newformula, . ~ . + (1 | patient)   ) )  mod #>  #>  Conditional Model  #>  #>  Raw formula:  #> Y ~ X + (1 | patient) + X:main_rrr1 + X:main_sss1  #>  #>  Raw Coefficients:  #>              Estimate #> (Intercept)  29.67502 #> X1            1.95151 #> X0:main_rrr1  0.91118 #> X1:main_rrr1  6.60974 #> X0:main_sss1  6.17416 #> X1:main_sss1  4.81967 #>  #>  Transformed Coefficients:  #>             Estimate #> (Intercept) 29.67502 #> [X=1]        1.95151 #> [X=0]:amp    6.24103 #> [X=1]:amp    8.18034 #> [X=0]:acr    1.42427 #> [X=1]:acr    0.63004 mod$fit # printing the `glmmTMB` model within shows Std.Dev. of random effect #> Formula:          Y ~ X + (1 | patient) + X:main_rrr1 + X:main_sss1 #> Data: newdata #>       AIC       BIC    logLik  df.resid  #> 1247.9058 1274.2923 -615.9529       192  #> Random-effects (co)variances: #>  #> Conditional model: #>  Groups   Name        Std.Dev. #>  patient  (Intercept) 0.4158   #>  Residual             5.2490   #>  #> Number of obs: 200 / Conditional model: patient, 5 #>  #> Dispersion estimate for gaussian family (sigma^2): 27.6  #>  #> Fixed Effects: #>  #> Conditional model: #>  (Intercept)            X1  X0:main_rrr1  X1:main_rrr1  X0:main_sss1   #>      29.6750        1.9515        0.9112        6.6097        6.1742   #> X1:main_sss1   #>       4.8197"},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/vitamind.html","id":null,"dir":"Reference","previous_headings":"","what":"Vitamin D — vitamind","title":"Vitamin D — vitamind","text":"Simulated data set illustrate cosinor model. Y outcome variable varies time time according cosine curve. binary covariate X associated mean amplitude cosine curve.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/vitamind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vitamin D — vitamind","text":"","code":"vitamind"},{"path":"https://rwparsons.github.io/GLMMcosinor/reference/vitamind.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Vitamin D — vitamind","text":"data frame 3 variables: X, Y, time.","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/news/index.html","id":"glmmcosinor-development-version","dir":"Changelog","previous_headings":"","what":"GLMMcosinor (development version)","title":"GLMMcosinor (development version)","text":"Fix small typos vignettes/docs make plot legend title consistent across autoplot() polar_plot()","code":""},{"path":"https://rwparsons.github.io/GLMMcosinor/news/index.html","id":"glmmcosinor-010","dir":"Changelog","previous_headings":"","what":"GLMMcosinor 0.1.0","title":"GLMMcosinor 0.1.0","text":"First development version GLMMcosinor submission rOpenSci. Includes functions fitting cosinor model, similarly {cosinor} R package using glmmTMB modelling framework allow flexibility terms fitting generalised linear mixed cosinor models.","code":""}]
